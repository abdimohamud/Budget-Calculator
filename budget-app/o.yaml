openapi: 3.0.0
info:
  version: 1.0.0
  title: Harbor API
  description: Harbor backend REST API
  contact:
    name: Harbor
servers:
  - url: http://localhost:3000
    description: Local server for development
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  Pagination:
    page:
      type: number
      default: 0
    pageSize:
      type: number
      default: 15
    orderDirection:
      type: string
      enum:
        - asc
        - desc
  schemas:
    Library:
      description: Library object
      type: object
      properties:
        recommended:
          type: array
          items:
            type: object
            properties:
              id:
                type: number
                description: event id
              name:
                type: string
                description: event name
              description:
                type: string
                description: Short event description
              enabled:
                type: boolean
                description: flag if event is enabled
              eventTypeId:
                type: number
                description: id of kind of event
              isPriority:
                type: boolean
                description: priority flag
              iconUrl:
                type: string
                description: url to the icon (will change with new files approach)
              backgroundUrl:
                type: string
                description: url to the background (will change with new files approach)
              label:
                type: string
                description: event label
        otherRisks:
          type: array
          items:
            type: object
            properties:
              id:
                type: number
                description: event id
              name:
                type: string
                description: event name
              description:
                type: string
                description: Short event description
              enabled:
                type: boolean
                description: flag if event is enabled
              eventTypeId:
                type: number
                description: id of kind of event
              isPriority:
                type: boolean
                description: priority flag
              iconUrl:
                type: string
                description: url to the icon (will change with new files approach)
              backgroundUrl:
                type: string
                description: url to the background (will change with new files approach)
              label:
                type: string
                description: event label
      example:
        recommended:
          - id: 2
            name: Heat Wave
            description: Some bad event
            enabled: true
            eventTypeId: 3
            ordering: 2
            isPriority: false
            iconUrl: https://cdns.iconmonstr.com/wp-content/assets/preview/2016/240/iconmonstr-car-3.png
            backgroundUrl: https://some.image.png
            label: area
          - id: 4
            name: Tsunami
            description: Some bad event
            enabled: true
            eventTypeId: 3
            ordering: 4
            isPriority: true
            iconUrl: https://cdns.iconmonstr.com/wp-content/assets/preview/2016/240/iconmonstr-car-3.png
            backgroundUrl: https://some.image.png
            label: default
        otherRisks:
          - id: 4
            name: Pandemic
            description: Some bad event
            enabled: true
            eventTypeId: 3
            ordering: 1
            isPriority: false
            iconUrl: https://cdns.iconmonstr.com/wp-content/assets/preview/2016/240/iconmonstr-car-3.png
            backgroundUrl: https://some.image.png
            label: common
          - id: 1
            name: Floods
            description: Some bad event
            enabled: true
            eventTypeId: 3
            ordering: 3
            isPriority: true
            iconUrl: https://cdns.iconmonstr.com/wp-content/assets/preview/2016/240/iconmonstr-car-3.png
            backgroundUrl: https://some.image.png
            label: default
    UploadImageFile:
      description: upload image (as admin)
      required:
        - fileName
        - fileType
      properties:
        fileName:
          type: string
          description: File name
        fileType:
          description: Allowed file type extension
          type: string
          enum:
            - jpg
            - jpeg
            - png
            - svg
      example:
        fileName: some-file
        fileType: png
    UpdateInventoryCategory:
      type: object
      properties:
        iconUuid:
          type: string
          description: Cannot be null
          format: uuid
        desc:
          type: string
          description: Category description
          required: false
          maxLen: 256
        suggestion:
          type: string
          description: Category suggestion
          required: false
          maxLen: 256
    AdminRiskSpecificPlan:
      description: Risk specific plan
      required:
        - name
        - riskSpecificPlanDataTypeId
      properties:
        name:
          description: Name of risk specific plan
          type: string
        description:
          description: Description for risk specif plan
          type: string
        riskSpecificPlanDataTypeId:
          description: Risk specific plan type data type (1 = check, 2 = toggle)
          type: integer
    CreateSessionAdmin:
      description: Create new admin session with email and password
      required:
        - email
        - password
      properties:
        email:
          type: string
          description: User/Admin email
        password:
          type: string
          description: User/Admin password
      example:
        email: admin@helloharbor.com
        password: qwerty12345
    CreateAnswer:
      description: Create answer for specific Step
      properties:
        stepId:
          type: number
          description: Step ID
        dataType:
          type: string
          description: Data type of the answer
        contentGuid:
          type: string
          description: Guid identifier of the answer
    GetAnswers:
      description: Get answers for step
      properties:
        stepId:
          type: number
          description: Step ID
    ChaptersActivityId:
      description: Get list of chapters for activity
      properties:
        activityId:
          type: number
          description: Activity to find chapters for
      example:
        activityId: 19
    Covid19Progress:
      description: For given email sets JSON with number of pages for each section
        where user stopped reading. Calling this for a not tracked user returns
        all sections to be at page 1.
      properties:
        email:
          type: string
          description: User email
        createdAt:
          type: string
          format: date-time
          description: Timestamp of creation
        updatedAt:
          type: string
          format: date-time
          description: Timestamp of last update
        progress:
          type: object
          description: Object mapping progress in reading of each section
          properties:
            ways-to-help:
              type: number
              description: ways-to-help section progress
            social-distance-quarantine:
              type: number
              description: social-distance-quarantine section progress
            knowing-the-symptoms:
              type: number
              description: knowing-the-symptoms section progress
            food-storage:
              type: number
              description: food-storage section progress
            home-activities:
              type: number
              description: home-activities section progress
      example:
        email: john@smith.com
        createdAt: 2018-01-15T17:04:12.917Z
        updatedAt: 2018-01-17T17:33:44.349Z
        progress:
          ways-to-help: 1
          social-distance-quarantine: 1
          knowing-the-symptoms: 3
          food-storage: 8
          home-activities: 9
    CreateDocument:
      description: Mark file as document
      required:
        - fileUuid
      properties:
        fileUuid:
          type: string
          format: uuid
          description: Uuid of file that will be marked as document
        title:
          type: string
          description: Optional file title
        description:
          type: string
          description: Optional file description
      example:
        fileUuid: b3211fa6-d5d7-4a45-bf03-50bcdb48986a
        title: Bruce's ID
    UpdateEmergencyContact:
      description: Update emergency contact
      properties:
        address:
          type: object
          description: Address object
          schema:
            $ref: "#/components/schemas/UpsertAddress"
        contactTypeDescription:
          type: string
          description: Contact type description
        email:
          type: string
          description: email
        fullName:
          type: string
          description: Full name
        phoneNumber:
          type: string
          description: Phone number
    CreateEmergencyContact:
      description: Create emergency contact
      properties:
        address:
          type: object
          description: Address object
          schema:
            $ref: "#/components/schemas/UpsertAddress"
        contactTypeDescription:
          type: string
          description: Contact type description
        emergencyContactTypeId:
          type: number
          description: type id of contact
        email:
          type: string
          description: email
        fullName:
          type: string
          description: Full name
        phoneNumber:
          type: string
          description: Phone number
    UploadFile:
      description: upload file request schema
      required:
        - fileName
        - fileType
      properties:
        fileName:
          type: string
          description: File name
        fileType:
          description: File extension
          type: string
          enum:
            - jpg
            - jpeg
            - png
            - svg
            - avi
            - mov
            - mp4
            - pdf
            - doc
            - txt
            - rtf
        category:
          type: string
          description: intended file category, will by to decide whether file should be
            public or not
          enum:
            - stepImage
            - stepVideo
      example:
        fileName: some-file
        fileType: txt
        category: document
    CustomInventory:
      description: Custom inventory for user
      required:
        - name
        - quantity
        - inventoryCategoryId
      properties:
        name:
          type: string
          description: Custom inventory name
        quantity:
          description: Quantity
          type: number
        inventoryCategoryId:
          description: Id of inventory category
          type: number
    UpdateCustomInventory:
      description: Update custom inventory for user
      properties:
        quantity:
          type: number
          description: Quantity
        name:
          description: Name
          type: string
    UserInventory:
      description: Update inventory for user
      properties:
        type: array
        required:
          - id
          - owned
        items:
          id:
            type: number
            description: Id of inventory
          owned:
            description: If inventory is owned or not
            type: boolean
    CreatePopupDismissal:
      description: Create an event tracking a user's popup dismissal;
      properties:
        popupId:
          type: number
          description: Popup ID
        userId:
          type: number
          description: User ID
    CustomRiskSpecificPlan:
      description: Custom Risk specific plan
      required:
        - name
      properties:
        name:
          description: Name of risk specific plan
          type: string
        description:
          description: Description for risk specif plan
          type: string
    UpdateRiskSpecificPlan:
      description: Update Risk specific plan for user
      properties:
        type: array
        required:
          - id
          - name
        items:
          id:
            type: number
            description: Id of inventory
          isCompleted:
            description: If risk specif plan is completed or not
            type: boolean
    CreateSafeLocation:
      description: Create safe location
      properties:
        name:
          type: string
          description: Name of safe location
        description:
          type: string
          description: Description of safe location
        address:
          type: string
          description: Address of safe location
        latitude:
          type: float
          description: Latitude
        longitude:
          type: float
          description: Longitude
        imageUuid:
          type: string
          description: Uuid of uploaded image
        safeLocationCategoryId:
          type: string
          description: Safe location category id
    UpdateSafeLocation:
      description: Update safe location
      properties:
        name:
          type: string
          description: Name of safe location
        description:
          type: string
          description: Description of safe location
        address:
          type: string
          description: Address of safe location
        imageUuid:
          type: string
          description: Uuid of uploaded image
        latitude:
          type: float
          description: Latitude
        longitude:
          type: float
          description: Longitude
    CreateSession:
      description: Create new session with email and password
      required:
        - email
        - password
      properties:
        email:
          type: string
          description: User email
        password:
          type: string
          description: User password
      example:
        email: john@smith.com
        password: supersecretpassword
    CreateSessionApple:
      description: Create new session using apple signin
      required:
        - appleToken
      properties:
        appleToken:
          type: string
          description: Token from apple
        invitationToken:
          type: string
          description: Invitation token
        firstName:
          type: string
          description: User first name
        lastName:
          type: string
          description: User last name
      example:
        appleToken: ABCD-TO-BE-UPDATED-WITH-PROPER-LOOKING-TOKEN-APPLETOKENPLSSIGNINME
        invitationToken: dc73f387699cac24fbf00d7e548aa5431130a622bfe3bd1efab9a4a2a6104038c4d00599cb95bc93196b3543e9fa25cf7bc3e93ec870e480ce3d34817a3ec20f
        firstName: John
        lastName: Doe
    CreateCheckoutSession:
      description: Create Stripe Checkout session
      required:
        - stripePlanId
      properties:
        stripePlanId:
          type: string
          description: Stripe plan ID
      example:
        stripePlanId: price_1GuWEO2eZvKYlo2Czs2zjrvL
    AppleInAppSubscriptionPurchase:
      description: Process apple subscription in app-purchase schema
      required:
        - receipt
      properties:
        receipt:
          type: string
        transactionId:
          type: string
      example:
        receipt: ABCD
        transactionId: EFGH
    UpdateUser:
      description: Update user validation schema
      properties:
        avatarUuid:
          type: string
          format: uuid
          description: uuid of uploaded image
      example:
        avatarUuid: 031b9994-2426-48e3-878f-58c6c5caeb07
    UpdatePassword:
      description: Update password validation schema
      required:
        - password
      properties:
        password:
          type: string
          description: current user password
        newPassword:
          type: string
          description: new user password
      example:
        password: old-supersecretpassword
        newPassword: new-supersecretupdatedpassword
    CreateUser:
      description: Create new user validation schema
      required:
        - email
        - password
        - firstName
        - lastName
      properties:
        email:
          type: string
          description: User email
        password:
          type: string
          description: User password
        firstName:
          type: string
          description: First name
        lastName:
          type: string
          description: Last name
        invitationToken:
          type: string
          description: Invitation token that will assign user to the specific household
      example:
        email: john@smith.com
        password: supersecretpassword
        firstName: John
        lastName: Smith
        invitationToken: dc73f387699cac24fbf00d7e548aa5431130a622bfe3bd1efab9a4a2a6104038c4d00599cb95bc93196b3543e9fa25cf7bc3e93ec870e480ce3d34817a3ec20f
    ForgotPassword:
      description: Forgot password validation schema
      required:
        - email
      properties:
        email:
          type: string
          description: User email
      example:
        email: john@smith.com
    ResendConfirmation:
      description: Resend confirmation validation schema
      allOf:
        - $ref: "#/components/schemas/ForgotPassword"
    ResetPassword:
      description: Reset password validation schema
      required:
        - token
        - newPassword
      properties:
        token:
          type: string
          description: Token sent via email
        newPassword:
          type: string
          description: New password
      example:
        token: a87f43e38904a4ec2b886a73819245cc95c101cc0f7bf5a96254dc31f0f0ac9f5a497175e486d95b45b0fca700275ba64fb21543019a683bb4356445558efa37
        newPassword: newSecurePassword
    ConfirmUser:
      description: Confirm new user
      required:
        - token
      properties:
        token:
          type: string
          description: Token sent via email
      example:
        token: a87f43e38904a4ec2b886a73819245cc95c101cc0f7bf5a96254dc31f0f0ac9f5a497175e486d95b45b0fca700275ba64fb21543019a683bb4356445558efa37
    CreateAnswerForUserQuestion:
      description: Create answer for user question
      required:
        - answer
      properties:
        answer:
          type: number
    UpsertAddress:
      description: Upsert address
      properties:
        zipcode:
          type: string
          pattern: ^[0-9]{5}(-[0-9]{4})?$
        address:
          type: string
        city:
          type: string
        stateId:
          type: number
    CreateDeviceToken:
      description: Create device token
      properties:
        token:
          type: string
    UploadAvatar:
      description: upload avatar request schema
      required:
        - fileName
        - fileType
      properties:
        fileName:
          type: string
          description: File name
        fileType:
          description: Image file type extension
          type: string
          enum:
            - jpg
            - jpeg
            - png
      example:
        fileName: someCoolAvatar
        fileType: png
    InviteUser:
      description: invite user schema
      required:
        - email
      properties:
        email:
          type: string
          description: Invited user email address
        householdUserId:
          type: number
          description: Household user that will be associated with the user
      example:
        email: jane@doe.com
    CreateActivity:
      type: object
      description: Input for creating a new activity
      properties:
        name:
          type: string
          required: true
          minLength: 2
          maxLength: 254
        theme:
          type: string
          required: true
          minLength: 1
        description:
          type: string
          required: true
        activityLevelId:
          type: number
          required: true
        eventId:
          type: number
          description: Id of the parent event
          required: true
        schema:
          type: object
          required: true
          description: JSON schema -> activity settings
        iconUuid:
          type: string
          format: uuid
          description: Uuid of file uploaded to AWS S3
          required: true
        backgroundUuid:
          type: string
          format: uuid
          description: Uuid of file uploaded to AWS S3
          required: true
    Activity:
      type: object
      description: Activity API object
      properties:
        name:
          type: string
        activityLevelId:
          type: string
          description: 1,2,3 - essential, intermediate, advanced
        description:
          type: string
        id:
          type: number
        eventId:
          type: number
        schema:
          type: object
          description: Activity settings (JSON)
      example:
        id: 1
        name: BAM!
        iconUuid: 948ccca0-9527-11ea-9f99-6724eb0a5539
        backgroundUuid: 948ccca0-9527-11ea-9f99-6724eb0a5539
        schema:
          enabled: true
    ActivitiesList:
      type: object
      properties:
        total:
          type: number
          example: 1
        results:
          description: Ordered list of activities
          type: array
          items:
            $ref: "#/components/schemas/Activity"
    UpdateActivity:
      type: object
      description: Input for updating an activity
      properties:
        name:
          type: string
          minLength: 2
          maxLength: 254
        theme:
          type: string
          minLength: 1
        description:
          type: string
        activityLevelId:
          type: number
        eventId:
          type: number
          description: Id of the parent event
        schema:
          type: object
          description: JSON schema -> activity settings
        iconUrl:
          type: string
          description: AWS S3 URL with the path to the image
    CreateActivityGroup:
      type: object
      description: Data for creating new activity group
      properties:
        name:
          description: Name of the activity group
          type: string
          required: true
        displayName:
          description: Display name of activity group
          type: string
          required: true
    ActivityGroup:
      description: ActivityGroup object
      type: object
      properties:
        id:
          type: number
          description: ActivityGroup id
        name:
          description: Name of the activity group
          type: string
        displayName:
          description: Display name of activity group
          type: string
    ActivityGroupsList:
      type: object
      properties:
        total:
          type: number
          example: 1
        results:
          description: Ordered list of activity groups
          type: array
          items:
            $ref: "#/components/schemas/ActivityGroup"
    UpdateActivityGroup:
      type: object
      description: Data for updating existing activity group
      properties:
        activityGroupTypeId:
          description: ActivityGroup type id (1 - household members, 2 - household pets)
          type: number
        multiplier:
          description: Any optional scalar value
          type: number
        name:
          description: Name of activityGroup
          type: string
        displayName:
          description: Display name of activityGroup
          type: string
    UpdateAppConfiguration:
      type: object
      description: Input for updating app configuration
      properties:
        links:
          type: object
          required: true
          description: Array of links
    UploadImageAdmin:
      type: object
      properties:
        signedUrl:
          type: string
          description: Upload the image using this URL
        expires:
          type: number
          description: in seconds
        file:
          $ref: "#/components/schemas/File"
      example:
        signedUrl: https://some-url.com/for-uploading-image
        expires: 60
        file:
          uuid: b3211fa6-d5d7-4a45-bf03-50bcdb48986a
          name: some-file
          type: txt
    CreateChapter:
      type: object
      description: Input for creating a new chapter
      properties:
        name:
          type: string
          required: true
          minLength: 2
          maxLength: 254
        activityId:
          type: number
          description: Id of the parent activity
          required: true
        schema:
          type: object
          required: true
          description: JSON schema -> chapter settings
        expiresInDays:
          type: number
          description: Set if you want the chapter to expire eventually
          required: false
        description:
          type: string
          description: A description of the chapter
          required: true
    Chapter:
      type: object
      description: Chapter API object
      properties:
        name:
          type: string
        id:
          type: number
        activityId:
          type: number
        schema:
          type: object
          description: Chapter settings (JSON)
        expiresInDays:
          type: number
          description: Set if you want the chapter to expire eventually
        description:
          type: string
          description: A description of the chapter
      example:
        id: 1
        activityId: 1
        name: BAM!
        schema:
          enabled: true
    ChaptersList:
      type: object
      properties:
        total:
          type: number
          example: 1
        results:
          description: Ordered list of chapters
          type: array
          items:
            $ref: "#/components/schemas/Chapter"
    UpdateChapter:
      type: object
      description: Input for updating a new chapter
      properties:
        name:
          type: string
          required: true
          minLength: 2
          maxLength: 254
        activityIds:
          type: number
          description: Ids of the parent activity
          required: true
        schema:
          type: object
          required: true
          description: JSON schema -> chapter settings
        expiresInDays:
          type: number
          description: Set if you want the chapter to expire eventually
          required: false
        description:
          type: string
          description: A description of the chapter
          required: true
        stepIds:
          description: Order of steps - has to include IDs of all steps in the chapter.
            Users will then see these steps in the following order
          type: array
          items:
            type: number
    CreateComputation:
      type: object
      description: Data for creating new computation
      properties:
        multiplier:
          description: Any optional scalar value
          type: number
        name:
          description: Name of computation
          type: string
          required: true
        quantity:
          description: The multiplicand of the computation
          type: string
    Computation:
      description: Computation object
      type: object
      properties:
        id:
          type: number
          description: Computation id
        multiplier:
          description: Any optional scalar value
          type: number
        name:
          description: Name of computation
          type: string
        quantity:
          description: The multiplicand of the computation
          type: string
    ComputationsList:
      description: List of computations for admin
      type: object
      properties:
        total:
          description: Total number of computations
          type: number
          example: 1
        results:
          description: List of computations
          type: array
          items:
            $ref: "#/components/schemas/Computation"
    UpdateComputation:
      type: object
      description: Data for updating existing computation
      properties:
        computationTypeId:
          description: Computation type id (1 - household members, 2 - household pets)
          type: number
        multiplier:
          description: Any optional scalar value
          type: number
        name:
          description: Name of computation
          type: string
        quantity:
          description: The multiplicand of the computation
          type: string
    CreateEmergencyMode:
      type: object
      description: Data for creating new emergency mode
      properties:
        name:
          type: string
          description: Emergency mode name
          required: true
        eventId:
          type: number
          description: Id of linked event
          required: true
        emergencyModeTypeId:
          type: number
          description: Emergency plan type id (1,2,3)
          required: true
        rawValue:
          type: object
          description: Object with content of emergency mode
          required: true
    ListEmergencyMode:
      description: List of emergency mode for admin
      type: object
      properties:
        total:
          description: Total number of emergency modes
          type: number
          example: 1
        results:
          description: List of emergency modes
          type: array
          items:
            $ref: "#/components/schemas/EmergencyMode"
    EmergencyMode:
      description: Emergency mode
      properties:
        id:
          type: number
        emergencyModeTypeId:
          type: number
          description: Type of emergency mode
        rawValue:
          type: object
          description: Schema for emergency mode
        name:
          type: string
    UpdateEmergencyMode:
      type: object
      description: Data for updating existing emergency mode
      properties:
        name:
          type: string
          description: Emergency mode name
        eventId:
          type: number
          description: Id of emergency mode
        emergencyModeTypeId:
          type: number
          description: Emergency mode data type
        rawValue:
          type: object
          description: Object with content of emergency mode
    CreateEvent:
      type: object
      description: Data for creating new event
      properties:
        name:
          description: Name of event
          type: string
          required: true
        description:
          description: Description of event
          type: string
          required: true
        disclaimer:
          description: Disclaimer to why the user is seeing the event
          type: string
          required: true
        enabled:
          description: Flag indicating wheather event is visable to user
          type: boolean
          required: true
        eventTypeId:
          description: Id of referenced event type
          type: number
          required: true
        ordering:
          description: Order in which the event should be presented to the user
          type: number
          required: false
        isPriority:
          description: Flag whether the event should always show in the list of relevant
            events of the user (before the rest of the not relevant)
          type: boolean
          required: true
        iconUuid:
          type: string
          format: uuid
          description: Uuid of file uploaded to AWS S3
          required: true
        eventListImageUuid:
          type: string
          format: uuid
          description: Uuid of file uploaded to AWS S3
          required: true
        eventDetailImageUuid:
          type: string
          format: uuid
          description: Uuid of file uploaded to AWS S3
          required: true
      example:
        name: Earthquake
        description: Prevent the damage of items and pontential injuries
        enabled: true
        eventTypeId: 2
        ordering: 3
        isPriority: false
        iconUuid: 031b9994-2426-48e3-878f-58c6c5caeb07
        eventDetailImageUuid: 031b9994-2426-48e3-878f-58c6c5caeb07
        eventListImageUuid: 031b9994-2426-48e3-878f-58c6c5caeb07
    Event:
      description: Event object
      type: object
      properties:
        id:
          type: number
          description: event id
        createdAt:
          description: time stamp of event creation
          type: string
          format: date-time
        updatedAt:
          description: time stamp of last event change
          type: string
          format: date-time
        name:
          description: Name of event
          type: string
        description:
          description: Description of event
          type: string
        enabled:
          description: Flag indicating wheather event is visable to user
          type: boolean
        eventTypeId:
          description: Id of referenced event type
          type: number
        ordering:
          description: Order in which the event should be presented to the user
          type: number
        isPriority:
          description: Flag whether the event should always show in the list of relevant
            events of the user (before the rest of the not relevant)
          type: boolean
        backgroundUuid:
          description: Uuid of image
          type: string
          format: uuid
        background:
          $ref: "#/components/schemas/File"
        backgroundUrl:
          type: string
          description: Url to image on S3
        iconUuid:
          description: Uuid of image
          type: string
          format: uuid
        icon:
          $ref: "#/components/schemas/File"
        iconUrl:
          type: string
          description: Url to image on S3
      example:
        id: 1
        createdAt: 2020-05-18T17:14:39Z
        updatedAt: 2020-05-18T17:14:39Z
        name: Earthquake
        description: Prevent the damage of items and potential injuries
        enabled: true
        eventTypeId: 2
        ordering: 3
        isPriority: false
    EventsList:
      description: List of events for admin
      type: object
      properties:
        total:
          description: Total number of events
          type: number
          example: 1
        results:
          description: List of events
          type: array
          items:
            $ref: "#/components/schemas/Event"
    Risk:
      description: Event/risk object (labeled event)
      type: object
      properties:
        id:
          type: number
          description: event id
        createdAt:
          description: time stamp of event creation
          type: string
          format: date-time
        updatedAt:
          description: time stamp of last event change
          type: string
          format: date-time
        name:
          description: Name of event
          type: string
        description:
          description: Description of event
          type: string
        enabled:
          description: Flag indicating wheather event is visable to user
          type: boolean
        eventTypeId:
          description: Id of referenced event type
          type: number
        ordering:
          description: Order in which the event should be presented to the user
          type: number
        isPriority:
          description: Flag whether the event should always show in the list of relevant
            events of the user (before the rest of the not relevant)
          type: boolean
        isSubscribed:
          description: Flag whether the user has subscribed to the event
          type: boolean
        label:
          description: Relation of the event to the user. default - applies to everyone,
            area - event/risk that is relevant to the user based on his location
            (zipcode), common - all other events
          type: string
          enum:
            - default
            - area
            - common
      example:
        id: 1
        createdAt: 2020-05-18T17:14:39Z
        updatedAt: 2020-05-18T17:14:39Z
        name: Earthquake
        description: Prevent the damage of items and potential injuries
        enabled: true
        eventTypeId: 2
        ordering: 3
        isPriority: false
        isSubscribed: true
        label: area
    RiskList:
      description: List of events/risks for user
      type: object
      properties:
        total:
          description: Total number of events
          type: number
          example: 1
        results:
          description: List of risks (labeled and ordered events)
          type: array
          items:
            $ref: "#/components/schemas/Risk"
    EventList:
      description: List events for NON admin endpoint.
      type: object
      properties:
        total:
          description: Total number of events
          type: number
          example: 1
        results:
          description: List of events
          type: array
          items:
            $ref: "#/components/schemas/Event"
    UpdateEvent:
      type: object
      description: Data for updating existing event
      properties:
        name:
          description: Name of event
          type: string
          required: true
        description:
          description: Description of event
          type: string
          required: true
        disclaimer:
          description: Disclaimer to why the user is seeing the event
          type: string
          required: true
        enabled:
          description: Flag indicating wheather event is visable to user
          type: boolean
          required: true
        eventTypeId:
          description: Id of referenced event type
          type: number
          required: true
        ordering:
          description: Order in which the event should be presented to the user
          type: number
        isPriority:
          description: Flag whether the event should always show in the list of relevant
            events of the user (before the rest of the not relevant)
          type: boolean
        iconUuid:
          type: string
          format: uuid
          description: Uuid of file uploaded to AWS S3
          required: true
        eventListImageUuid:
          type: string
          format: uuid
          description: Uuid of file uploaded to AWS S3
          required: true
        eventDetailImageUuid:
          type: string
          format: uuid
          description: Uuid of file uploaded to AWS S3
          required: true
        stepIds:
          description: Order of risk specific plans (RSP) - has to include IDs of all RSP
            in the event. Users will then see these RSP in the following order
          type: array
          items:
            type: number
      example:
        name: Earthquake
        description: Prevent the damage of items and pontential injuries
        enabled: true
        eventTypeId: 2
        ordering: 3
        isPriority: false
        iconUuid: 948ccca0-9527-11ea-9f99-6724eb0a5539
        backgroundUuid: 948ccca0-9527-11ea-9f99-6724eb0a5539
    CreateInputStepData:
      type: object
      description: Data for creating new input step data
      properties:
        stepId:
          description: Step id
          type: number
          required: true
        stepContentName:
          description: Guid name of the step content
          type: string
          required: true
        inputStepDataTypeId:
          description: Step data type id (1 = computation, 2 = inventory)
          type: number
          required: true
        data:
          description: "Dynamic object for input step data  { computationId: 1 }  or  {
            inventoryIds: [1,2,3]}"
          type: object
          required: true
    InputStepData:
      description: Input step data object
      type: object
      properties:
        id:
          type: number
          description: Input step data id
    InputStepDataList:
      description: List of input step data for admin
      type: object
      properties:
        total:
          description: Total number of input step data
          type: number
          example: 1
        results:
          description: List of input step data
          type: array
          items:
            $ref: "#/components/schemas/InputStepData"
    UpdateInputStepData:
      type: object
      description: Data for updating existing input step data
      properties:
        stepId:
          description: Step id
          type: number
          required: true
        stepContentName:
          description: Guid name of the step content
          type: string
          required: true
        inputStepDataTypeId:
          description: Step data type id (1 = computation, 2 = inventory)
          type: number
          required: true
        data:
          description: "Dynamic object for input step data  { computationId: 1 }  or  {
            inventoryIds: [1,2,3]}"
          type: object
          required: true
    CreateInventory:
      type: object
      description: Data for creating new inventory
      properties:
        name:
          description: Name of inventory
          type: string
          required: true
        description:
          description: Description of inventory
          type: string
          required: false
        inventoryCategoryId:
          description: Id of referenced inventory category
          type: number
          required: true
        computationId:
          description: Id of referenced computation
          type: number
          required: false
    Inventory:
      description: Inventory object
      type: object
      properties:
        id:
          type: number
          description: Inventory id
        name:
          description: Name of inventory
          type: string
        inventoryCategoryId:
          description: Id of referenced inventory type
          type: number
    InventoriesList:
      description: List of invetories for admin
      type: object
      properties:
        total:
          description: Total number of inventories
          type: number
          example: 1
        results:
          description: List of inventories
          type: array
          items:
            $ref: "#/components/schemas/Inventory"
    InventoryCategory:
      type: object
      properties:
        name:
          type: string
          description: Category name. Not editable
          required: true
        desc:
          type: string
          description: Category description
          required: false
        suggestion:
          type: string
          description: Category suggestion
          required: false
        iconUrl:
          type: string
          description: Category icon url
          required: true
      example:
        name: Go bag
        desc: These are items in your go bag.
        suggestion: You can get all of the following items from your local store.
        iconUrl: https://harbor-development.s3-us-west-1.amazonaws.com/public/avatar1.png
    UpdateInventory:
      type: object
      description: Data for updating existing inventory
      properties:
        name:
          description: Name of inventory
          type: string
        description:
          description: Description of inventory
          type: string
        computationId:
          description: Computation id
          type: string
    SendPushNotifications:
      type: object
      description: Data for sending push notifications
      properties:
        fromZipcode:
          description: Beggining of zipcode range
          type: number
          required: false
        toZipcode:
          description: End of zipcode range
          type: number
          required: false
        userId:
          description: Sepecific user to send push to
          type: number
          required: false
        riskId:
          description: Users with a subscription to risk
          type: number
          required: false
        email:
          description: Sepecific user's email
          type: string
          required: false
        state:
          description: Users from a state
          type: string
          required: false
        filterStartTime:
          description: Days since the user has signed up
          type: number
          required: false
        title:
          description: Title of the push notification
          type: string
          required: true
        text:
          description: Text of the push notification body
          type: string
          required: true
      example:
        fromZipcode: 120
        toZipcode: 5372
        title: Harbor is open
        text: All ships welcomed to our new harbor
    RiskSpecificPlan:
      description: Risk specific plan item
      properties:
        id:
          type: number
          description: ID of risk specific plan
        name:
          type: string
          description: Name
        description:
          description: Desc of risk specific plan
          type: string
        isCompleted:
          description: True/false if risk specific plan is completed
          type: boolean
        isCustomItem:
          description: True/false if item is custom item
          type: boolean
    CreateStep:
      type: object
      description: Data for creating new step
      properties:
        name:
          type: string
          description: Step name
          required: true
          minLength: 2
          maxLength: 254
        chapterId:
          type: number
          description: Id of linked chapter
          required: true
        stepDataTypeId:
          type: number
          description: Step data type
          required: false
        rawValue:
          type: object
          description: Object with content of step
          required: true
      example:
        name: Hello world
        chapterId: 1
        rawValue:
          Hello: world
    StepsList:
      description: List of steps for admin
      type: object
      properties:
        total:
          description: Total number of steps
          type: number
          example: 1
        results:
          description: List of steps
          type: array
          items:
            $ref: "#/components/schemas/Step"
    UpdateStep:
      type: object
      description: Data for updating existing step
      properties:
        name:
          type: string
          description: Step name
          minLength: 2
          maxLength: 254
        chapterId:
          type: number
          description: Id of linked chapter
        stepDataTypeId:
          type: number
          description: Step data type
          required: false
        rawValue:
          type: object
          description: Object with content of step
      example:
        name: Hello world
        chapterId: 1
        rawValue:
          Hello: world
    AdminUser:
      description: User object for admin
      type: object
      allOf:
        - $ref: "#/components/schemas/User"
    AdminUsersList:
      description: List of users in admin
      type: object
      properties:
        total:
          description: Total number of users
          type: number
          example: 1
        results:
          description: List of users
          type: array
          items:
            $ref: "#/components/schemas/AdminUser"
    Answer:
      description: Answers
      type: object
      properties:
        id:
          type: number
          description: answer id
        name:
          type: string
          description: Guide of content type
        rawValue:
          type: object
          description: Raw values from the client
        stepDataTypeId:
          type: number
          description: Step data type id
        stepId:
          description: Step id
          type: number
    GetAnswersResponse:
      description: Get answers for step
      properties:
        answers:
          type: array
          description: Answers
          items:
            $ref: "#/components/schemas/Answer"
    ChaptersForActivity:
      type: object
      properties:
        total:
          type: number
          example: 1
        results:
          description: List of subscribed chapters for activity
          type: array
          items:
            $ref: "#/components/schemas/Chapter"
    Covid19ProgressResponse:
      description: For given email returns JSON with number of pages for each section
        where user stopped reading. Calling this for a not tracked user returns
        all sections to be at page 1.
      properties:
        id:
          type: number
          description: User id
        email:
          type: string
          description: User email
        createdAt:
          type: string
          format: date-time
          description: Timestamp of creation
        updatedAt:
          type: string
          format: date-time
          description: Timestamp of last update
        progress:
          type: object
          description: Object mapping progress in reading of each section
          properties:
            ways-to-help:
              type: number
              description: ways-to-help section progress
            social-distance-quarantine:
              type: number
              description: social-distance-quarantine section progress
            knowing-the-symptoms:
              type: number
              description: knowing-the-symptoms section progress
            food-storage:
              type: number
              description: food-storage section progress
            home-activities:
              type: number
              description: home-activities section progress
      example:
        id: 1
        email: john@smith.com
        createdAt: 2018-01-15T17:04:12.917Z
        updatedAt: 2018-01-17T17:33:44.349Z
        progress:
          ways-to-help: 1
          social-distance-quarantine: 1
          knowing-the-symptoms: 3
          food-storage: 8
          home-activities: 9
    DocumentResponse:
      type: object
      description: Response with instructions for uploading file
      properties:
        signedUrl:
          type: string
          description: Url for uploading image
        expires:
          type: number
          description: number on seconds until url expires
        file:
          $ref: "#/components/schemas/File"
      example:
        signedUrl: https://some-url.com/for-uploading-image
        expires: 60
        file:
          uuid: b3211fa6-d5d7-4a45-bf03-50bcdb48986a
          name: some-file
          type: txt
          title: Some file
          description: Some file description
          user:
            avatarId: 1
            firstName: Bruce
            lastName: Banner
            id: 1
    EmergencyContact:
      description: Emergency contact detail
      properties:
        id:
          type: number
        emergencyContactTypeId:
          type: number
          description: Type of emergency contact
        contactTypeDescription:
          type: string
          description: Description of emergency contact type
        fullName:
          type: string
        phoneNumber:
          type: string
        email:
          type: string
        address:
          $ref: "#/components/schemas/UpsertAddress"
    DownloadFileResponse:
      type: object
      description: Response with signed url for download and file details
      properties:
        file:
          type: object
          description: File details
          properties:
            name:
              type: string
              description: Original file name
            type:
              type: string
              description: File extension
            uuid:
              type: string
              format: uuid
              description: id for referencing file
        expires:
          type: number
          description: number of seconds until signedUrl will expire
        signedUrl:
          type: string
          description: Url for downloading image
    UploadFileResponse:
      type: object
      description: Response with instructions for uploading file
      properties:
        signedUrl:
          type: string
          description: Url for uploading image
        expires:
          type: number
          description: number on seconds until url expires
        file:
          $ref: "#/components/schemas/File"
      example:
        signedUrl: https://some-url.com/for-uploading-image
        expires: 60
        file:
          uuid: b3211fa6-d5d7-4a45-bf03-50bcdb48986a
          name: some-file
          type: txt
    CreateGenericHouseholdMembers:
      description: Creates generic  users during the onboarding process
      properties:
        memberType:
          type: string
          enum:
            - other
            - pet
            - kid
            - user
        firstName:
          type: string
        dateOfBirth:
          type: string
          format: date
        phone:
          type: string
        healthInformation:
          type: string
        avatarId:
          type: number
      example:
        memberType: pet
        firstName: John
        dateOfBirth: 1980-11-22T00:00:00.000Z
        phone: +1 303 404 505
        healthInformation: Lorem ipsum
        avatarId: 1
    CreateHouseholdMember:
      description: Create household member profile. Not connected to existing User.
      properties:
        memberType:
          type: string
          enum:
            - other
            - pet
            - kid
            - user
        firstName:
          type: string
        dateOfBirth:
          type: string
          format: date
        phone:
          type: string
        healthInformation:
          type: string
        avatarId:
          type: number
      example:
        memberType: pet
        firstName: John
        dateOfBirth: 1980-11-22T00:00:00.000Z
        phone: +1 303 404 505
        healthInformation: Lorem ipsum
        avatarId: 1
    CreateHousehold:
      description: Create household for a user
      properties:
        id:
          type: number
      example:
        id: 1
    HouseholdMember:
      description: Get household member profile. Possibly not connected to existing User.
      properties:
        householdUserTypeId:
          type: number
        userId:
          description: Assigned user account. Can be null.
          type: number
        firstName:
          type: string
        dateOfBirth:
          type: string
          format: date
        phone:
          type: string
        healthInformation:
          type: string
        avatar:
          type: object
          properties:
            id: number
            url: string
      example:
        householdUserTypeId: 1
        userId: null
        firstName: John
        dateOfBirth: 1980-11-22T00:00:00.000Z
        phone: +1 303 404 505
        healthInformation: Lorem ipsum
        avatar:
          id: 1
          url: http://avatar.s3.com/something
    HouseholdDashboard:
      description: Household dashboard object
      type: object
      properties:
        members:
          type: array
          items:
            $ref: "#/components/schemas/HouseholdMember"
        inventories:
          type: array
          items:
            $ref: "#/components/schemas/InventoryItem"
        emergencyContacts:
          type: array
          items:
            $ref: "#/components/schemas/EmergencyContact"
        safeLocations:
          type: array
          items:
            $ref: "#/components/schemas/SafeLocation"
        riskSpecificPlans:
          type: array
          description: RiskSpecificPlan items + event
          items:
            $ref: "#/components/schemas/RiskSpecificPlan"
        documentsCount:
          type: number
          description: Dummy value - empty for now
    UpdateHouseholdMember:
      description: Update household member profile. Not connected to existing User.
      properties:
        firstName:
          type: string
        dateOfBirth:
          type: string
          format: date
        phone:
          type: string
        healthInformation:
          type: string
        avatarId:
          type: number
      example:
        phone: +1 303 404 505
        healthInformation: Lorem ipsum
    CreateCustomInventory:
      description: Create custom inventory
    DeleteCustomInventory:
      description: Delete custom inventory
    ListUserInventories:
      description: List inventories
    UpdateUserInventories:
      description: Update user inventories
      properties:
        inventories:
          type: array
          items:
            type: Object
            properties:
              id: number
              owned: boolean
    SendUserPushNotifications:
      type: object
      description: Data for sending push notifications
      properties:
        userId:
          description: User Id
          type: number
          required: true
    SafeLocation:
      description: SafeLocation object
      properties:
        id:
          type: number
          description: ID of safe location
        address:
          description: Address of safe location
          type: string
        name:
          description: Name of safe location
          type: string
        description:
          description: Description of safe location
          type: string
        image:
          $ref: "#/components/schemas/DownloadFileResponse"
        imageUrl:
          type: string
          description: Url to image on S3
        safeLocationCategoryId:
          description: Safe location category id
          type: number
    AuthorizedUser:
      description: Credentials including user
      type: object
      properties:
        accessToken:
          description: JWT token
          type: string
        accessTokenExpiresAt:
          description: token expiration date
          type: string
          format: date-time
        refreshToken:
          description: JWT refresh token
          type: string
        refreshTokenExpiresAt:
          description: JWT refresh token
          type: string
          format: date-time
        user:
          $ref: "#/components/schemas/User"
      example:
        accessToken: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjEsImlhdCI6MTUxNjQ3NzYyOCwiZXhwIjoxNTE2NDgxMjI4fQ.jG0IuR2ggiOSSF-J189pJNVhSQdTF9Zl2xNE7FG86qY
        accessTokenExpiresAt: 2018-01-26t11:40:40.105Z
        refreshToken: a287683c4e0f630b161a6a045e29aacd6cc39c74
        refreshTokenExpiresAt: 2018-11-07T12:19:12.616Z
        user:
          id: 1
          createdAt: 2018-01-15T17:04:12.917Z
          updatedAt: 2018-01-17T17:33:44.349Z
          email: john@smith.com
          role: user
          confirmedAt: 2018-01-17T17:33:44.349Z
          googleId: null
          appleId: null
          socialEmail: null
    RefreshSession:
      description: Access tokens
      properties:
        accessToken:
          description: JWT token
          type: string
        accessTokenExpiresAt:
          description: token expiration date
          type: string
          format: date-time
    Step:
      description: Step object
      type: object
      properties:
        id:
          type: number
          description: step id
        stepDataTypeId:
          type: number
          description: Step data type
        createdAt:
          description: time stamp of step creation
          type: string
          format: date-time
        updatedAt:
          description: time stamp of last step change
          type: string
          format: date-time
        name:
          description: Name of step
          type: string
        chapterId:
          description: Id of referenced schema
          type: number
        rawValue:
          description: Object containing step content
          type: object
      example:
        id: 1
        createdAt: 2020-05-18T17:14:39Z
        updatedAt: 2020-05-18T17:14:39Z
        name: Hello world
        chapterId: 1
        rawValue:
          Hello: world
    CheckoutSession:
      description: Stripe Checkout session
      type: object
      properties:
        sessionId:
          type: string
          description: Stripe Checkout session ID
      example:
        sessionId: cs_test_2APAEBFIwaj4WLW69k1P0Ra100TOxNYB41gu1AmiGOiGoTSgmbrwE62A
    Subscription:
      description: Subsription detail for given user
      properties:
        id:
          type: number
          description: subscription id
        type:
          type: string
          enum:
            - apple
            - stripe
          description: through which platform the subscription has been purchased and
            being paid
        createdAt:
          type: string
          format: date-time
          description: Timestamp of subscription creation
        updatedAt:
          type: string
          format: date-time
          description: Timestamp of last subscription update
        name:
          type: string
          description: Name of subscription?
        isActive:
          type: boolean
          description: Indicator if subscription is still active
        periodEndsAt:
          type: string
          format: date-time
          description: Timestamp when currently paid periond ends
        cancellationRequestedAt:
          type: string
          format: date-time
          description: Timestamp when was cancellation requested
          nullable: true
        userId:
          type: number
          description: User id
        appleSubscriptionId:
          type: number
          description: reference for an apple subscription, if this is an apple subscription
        appleSubscription:
          type: object
          properties:
            id:
              type: number
              description: Apple subscription id
            createdAt:
              type: string
              format: date-time
              description: Timestamp of subscription creation
            updatedAt:
              type: string
              format: date-time
              description: Timestamp of last subscription update
            purchaseRef:
              type: string
              description: Apple specific subscription purchase reference/identified
        stripeSubscriptionId:
          type: number
          description: reference for a stripe subscription, if this is an apple subscription
        stripeSubscription:
          type: object
          properties:
            id:
              type: number
              description: Stripe subscription id
            createdAt:
              type: string
              format: date-time
              description: Timestamp of subscription creation
            updatedAt:
              type: string
              format: date-time
              description: Timestamp of last subscription update
            stripeId:
              type: number
              description: Stripe generated id for subscriptions
            stripePlanId:
              type: number
              description: id of a related stripe plan
      example:
        id: 5
        type: apple
        createdAt: 2020-05-08T13:58:02.369Z
        updatedAt: 2020-05-08T13:58:02.369Z
        name: Sub
        isActive: true
        periodEndsAt: 2020-05-08T13:58:02.369Z
        cancellationRequestedAt: null
        userId: 1
        appleSubscriptionId: 2
        appleSubscription:
          id: 3
          createdAt: 2020-05-08T13:58:02.369Z
          updatedAt: 2020-05-08T13:58:02.369Z
          purchaseRef: 1000000694304379
        stripeSubscriptionId: null
        stripeSubscription: null
    User:
      description: User object
      type: object
      properties:
        id:
          type: number
          description: user id
        email:
          type: string
          description: user email
        firstName:
          type: string
          description: First name
        lastName:
          type: string
          description: Last name
        socialEmail:
          description: email from oauth provider
          type: string
          nullable: true
        socialEmailVerified:
          description: socialEmailVerified
          type: boolean
          nullable: false
        firstLogin:
          description: flag for first successful login
          type: boolean
          nullable: false
        invitationToken:
          description: token for invitation into household
          type: string
          nullable: true
        partnerId:
          description: the id of the partner organization to which this user belongs
          type: number
          nullable: true
      example:
        id: 1
        email: john@smith.com
        firstName: john
        lastName: smith
        socialEmail: null
        socialEmailVerified: false
        firstLogin: false
        invitationToken: dc73f387699cac24fbf00d7e548aa5431130a622bfe3bd1efab9a4a2a6104038c4d00599cb95bc93196b3543e9fa25cf7bc3e93ec870e480ce3d34817a3ec20f
    UserDashboard:
      description: Dashboard object
      type: object
      properties:
        events:
          type: array
          items:
            type: object
            properties:
              id:
                type: number
                description: event id
              name:
                description: Name of event
                type: string
              description:
                description: Description of event
                type: string
              enabled:
                description: Flag indicating wheather event is visable to user
                type: boolean
              eventTypeId:
                description: Id of referenced event type
                type: number
              readiness:
                type: number
                description: the progress given user has in the given event
              iconUuid:
                type: string
                forma: uuid
              icon:
                $ref: "#/components/schemas/File"
              backgroundUuid:
                type: string
                format: uuid
              background:
                $ref: "#/components/schemas/File"
        suggestedActivities:
          type: array
          items:
            type: object
            properties:
              id:
                type: number
                description: activity id
              name:
                description: Name of activity
                type: string
              activityLevelId:
                type: string
                description: 1,2,3 - essential, intermediate, advanced
              description:
                type: string
              eventId:
                type: number
              schema:
                type: object
                description: Activity settings (JSON)
              readiness:
                type: number
                description: the progress given user has in the given activity
              iconUrl:
                type: string
        allActivities:
          type: array
          items:
            type: object
            properties:
              id:
                type: number
                description: activity id
              name:
                description: Name of activity
                type: string
              activityLevelId:
                type: string
                description: 1,2,3 - essential, intermediate, advanced
              description:
                type: string
              eventId:
                type: number
              schema:
                type: object
                description: Activity settings (JSON)
              readiness:
                type: number
                description: the progress given user has in the given activity
              iconUrl:
                type: string
        user:
          type: object
          properties:
            id:
              type: number
              description: user id
            email:
              type: string
              description: user email
            firstName:
              type: string
              description: First name
            lastName:
              type: string
              description: Last name
            socialEmail:
              description: email from oauth provider
              type: string
              nullable: true
            socialEmailVerified:
              description: socialEmailVerified
              type: boolean
              nullable: false
            firstLogin:
              description: flag for first successful login
              type: boolean
              nullable: false
            readiness:
              type: number
              description: user readiness value
            rank:
              type: string
              description: user rank
    InvitationResponse:
      description: Invitation response object
      type: object
      properties:
        token:
          type: string
          description: Invitation token
        issuedAt:
          type: string
          format: date
          description: Date of token creation
        expiresAt:
          type: string
          format: date
          description: Date when will token expire
        email:
          type: string
          description: Email where will be invitation send
      example:
        token: dc73f387699cac24fbf00d7e548aa5431130a622bfe3bd1efab9a4a2a6104038c4d00599cb95bc93196b3543e9fa25cf7bc3e93ec870e480ce3d34817a3ec20f
        issuedAt: 2020-06-19T14:42:10.202Z
        expiresAt: 2020-06-26T14:42:10.202Z
        email: jane@doe.com
    Readiness:
      type: object
      properties:
        readiness:
          type: number
          description: numerical representation uf user progress (1 = 100%)
        rank:
          type: string
          enum:
            - novice
            - advanced
            - expert
            - godlike
          description: rank based on progress
      example:
        readiness: 0.24
        rank: novice
    File:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
          description: image id
        name:
          type: string
          description: original file name
        type:
          type: string
          description: file type/extension
        title:
          type: string
          description: optional file title
        description:
          type: string
          description: optional file description
        user:
          type: object
          description: uploaders info - now only with file from documents endpoints
          properties:
            id:
              type: number
              description: id of user
            avatarUuid:
              type: string
              format: uuid
              description: uuid of avatar image
            firstName:
              type: string
              description: first name
            lastName:
              type: string
              description: last name
        path:
          type: string
          description: relative to image on bucket
    InventoryItem:
      description: Transformed inventory item (some additional properties)
      type: object
      properties:
        id:
          type: number
        name:
          type: string
        inventoryCategoryId:
          type: number
        owned:
          type: boolean
        isCustomInventory:
          type: boolean
        quantity:
          type: number
          description: How many is owned
    Error:
      description: General error object
      type: object
      required:
        - statusCode
        - type
        - message
      properties:
        statusCode:
          description: HTTP status code
          type: number
        type:
          description: Error type identifier
          type: string
        message:
          description: Error message/description
          type: string
        errors:
          description: List of scpecific problems that caused error
          type: array
          items:
            type: string
    BadRequestError:
      description: Bad Request Error
      allOf:
        - $ref: "#/components/schemas/Error"
      example:
        statusCode: 400
        type: E_BAD_REQUEST
        message: Something bad happened
    ValidationError:
      description: General error during schema validation
      allOf:
        - $ref: "#/components/schemas/Error"
      example:
        statusCode: 400
        type: E_INVALID_BODY
        message: Invalid request body
    BranchIOGenerateLinkError:
      description: Error while generating link with branch io
      allOf:
        - $ref: "#/components/schemas/Error"
      example:
        statusCode: 400
        type: E_INVALID_BODY
        message: Invalid request body
    InvalidRequestError:
      description: Request failed because of input validation error
      allOf:
        - $ref: "#/components/schemas/ValidationError"
      example:
        type: E_INVALID_REQUEST
        code: 400
        message: Invalid request data
        errors:
          - Email is required
    InvalidRequestBodyError:
      description: Body validation error
      allOf:
        - $ref: "#/components/schemas/ValidationError"
      example:
        type: E_INVALID_BODY
        code: 400
        message: Invalid request data
        errors:
          - Email is required
    InvalidRequestParamsError:
      description: Params validation error
      allOf:
        - $ref: "#/components/schemas/ValidationError"
      example:
        type: E_INVALID_PARAMS
        code: 400
        message: Invalid request data
        errors:
          - Email is required
    InvalidRequestQueryStringError:
      description: Credentials validation error
      allOf:
        - $ref: "#/components/schemas/BadRequestError"
      example:
        type: E_INVALID_CREDENTIALS
        code: 400
        message: Login failed
    ConflictError:
      description: Conflict error
      allOf:
        - $ref: "#/components/schemas/Error"
      example:
        type: E_CONFLICT
        code: 409
        message: Password reset token has already been used
    ForbiddenError:
      description: Forbidden error
      allOf:
        - $ref: "#/components/schemas/Error"
      example:
        type: E_FORBIDDEN
        code: 403
        message: The user is not allowed to access this resource
    UnauthorizedError:
      description: Unauthorized error
      allOf:
        - $ref: "#/components/schemas/Error"
      example:
        type: E_UNAUTHORIZED
        code: 401
        message: The user was not authorized
    RecordNotFoundError:
      description: Reccord not found
      allOf:
        - $ref: "#/components/schemas/Error"
      example:
        type: E_NOT_FOUND
        code: 404
        message: Not found
    UserNotFoundError:
      description: User not found
      allOf:
        - $ref: "#/components/schemas/RecordNotFoundError"
      example:
        type: E_USER_NOT_FOUND
        code: 404
        message: User does not exist
    ActivityNotFoundError:
      description: Activity does not exist
      allOf:
        - $ref: "#/components/schemas/RecordNotFoundError"
      example:
        type: E_ACTIVITY_NOT_FOUND
        code: 404
        message: Activity does not exist
    ActivityGroupNotFoundError:
      description: ActivityGroup does not exist
      allOf:
        - $ref: "#/components/schemas/RecordNotFoundError"
      example:
        type: E_ACTIVITY_GROUP_NOT_FOUND
        code: 404
        message: ActivityGroup does not exist
    ChapterNotFoundError:
      description: Chapter does not exist
      allOf:
        - $ref: "#/components/schemas/RecordNotFoundError"
      example:
        type: E_CHAPTER_NOT_FOUND
        code: 404
        message: Chapter does not exist
    RefreshTokenNotFoundError:
      description: Refresh token does not exist
      allOf:
        - $ref: "#/components/schemas/RecordNotFoundError"
      example:
        type: E_REFRESH_TOKEN_NOT_FOUND
        code: 404
        message: Refresh token does not exist
    ConfirmationTokenNotFoundError:
      description: User not found
      allOf:
        - $ref: "#/components/schemas/RecordNotFoundError"
      example:
        type: E_CONFIRMATION_TOKEN_NOT_FOUND
        code: 404
        message: Confirmation token does not exist
    PasswordResetTokenNotFoundError:
      description: Password reset token does not exist
      allOf:
        - $ref: "#/components/schemas/RecordNotFoundError"
      example:
        type: E_PASSWORD_RESET_TOKEN_NOT_FOUND
        code: 404
        message: Password reset token does not exist
    InvitationTokenNotFoundError:
      description: Invitation token does not exist
      allOf:
        - $ref: "#/components/schemas/RecordNotFoundError"
      example:
        type: E_INVITATION_TOKEN_NOT_FOUND
        code: 404
        message: Invitaiton token does not exist
    PopupNotFoundError:
      description: Popup does not exist
      allOf:
        - $ref: "#/components/schemas/RecordNotFoundError"
      example:
        type: E_POPUP_NOT_FOUND
        code: 404
        message: Popup does not exist
    AlreadyInHouseholdError:
      description: User has already joined the current household
      allOf:
        - $ref: "#/components/schemas/RecordNotFoundError"
      example:
        type: E_ALREADY_IN_HOUSEHOLD
        code: 409
    AlreadyInOtherHouseholdError:
      description: User has already joined another household
      allOf:
        - $ref: "#/components/schemas/RecordNotFoundError"
      example:
        type: E_ALREADY_IN_OTHER_HOUSEHOLD
        code: 409
    SubscriptionNotFoundError:
      description: Subscription does not exist for user
      allOf:
        - $ref: "#/components/schemas/RecordNotFoundError"
      example:
        type: E_SUBSCRIPTION_NOT_FOUND
        code: 404
        message: Subscription does not exist for user
    StripePlanNotFoundError:
      description: Subscription plan does not exist
      allOf:
        - $ref: "#/components/schemas/RecordNotFoundError"
      example:
        type: E_STRIPE_PLAN_NOT_FOUND
        code: 404
        message: Subscription plan does not exist
    StepNotFoundError:
      description: Step does not exist
      allOf:
        - $ref: "#/components/schemas/RecordNotFoundError"
      example:
        type: E_STEP_NOT_FOUND_ERROR
        code: 404
        message: Step does not exist
    ComputationNotFoundError:
      description: Computation does not exist
      allOf:
        - $ref: "#/components/schemas/RecordNotFoundError"
      example:
        type: E_COMPUTATION_NOT_FOUND_ERROR
        code: 404
        message: Computation does not exist
    InputStepDataNotFoundError:
      description: Input step data does not exist
      allOf:
        - $ref: "#/components/schemas/RecordNotFoundError"
      example:
        type: E_INPUT_STEP_DATA_NOT_FOUND_ERROR
        code: 404
        message: Computaiton does not exist
    OwnershipNotFoundError:
      description: Ownership does not exist
      allOf:
        - $ref: "#/components/schemas/RecordNotFoundError"
      example:
        type: E_OWNERSHIP_NOT_FOUND_ERROR
        code: 404
        message: Ownership does not exist
    HouseholdUserNotFoundError:
      description: Household user/member does not exist
      allOf:
        - $ref: "#/components/schemas/RecordNotFoundError"
      example:
        type: E_HOUSEHOLD_USER_NOT_FOUND_ERROR
        code: 404
        message: Household does not exist
    EventNotFoundError:
      description: Event does not exist
      allOf:
        - $ref: "#/components/schemas/RecordNotFoundError"
      example:
        type: E_EVENT_NOT_FOUND_ERROR
        code: 404
        message: Event does not exist
    InventoryNotFoundError:
      description: Inventory does not exist
      allOf:
        - $ref: "#/components/schemas/RecordNotFoundError"
      example:
        type: E_INVENTORY_NOT_FOUND_ERROR
        code: 404
        message: Inventory does not exist
    InventoryCategoryNotFoundError:
      description: Inventory category does not exist
      allOf:
        - $ref: "#/components/schemas/RecordNotFoundError"
      example:
        type: E_INVENTORY_CATEGORY_NOT_FOUND_ERROR
        code: 404
        message: Inventory category does not exist
    EventTypeNotFoundError:
      description: Event type does not exist
      allOf:
        - $ref: "#/components/schemas/RecordNotFoundError"
      example:
        type: E_EVENT_TYPE_NOT_FOUND_ERROR
        code: 404
        message: Event type does not exist
    EventsSubscriptionNotFoundError:
      description: Event subscription does not exist
      allOf:
        - $ref: "#/components/schemas/RecordNotFoundError"
      example:
        type: E_EVENTS_SUBSCRIPTION_NOT_FOUND_ERROR
        code: 404
        message: Event subscription does not exist
    FileNotFoundError:
      description: File does not exist
      allOf:
        - $ref: "#/components/schemas/RecordNotFoundError"
      example:
        type: E_FILE_NOT_FOUND
        code: 404
        message: Subscription plan does not exist
    FileNotUploadedError:
      description: File isn't uploaded to S3
      allOf:
        - $ref: "#/components/schemas/RecordNotFoundError"
      example:
        type: E_FILE_NOT_UPLOADED
        code: 404
        message: File record was created but file isn't uploaded to S3
    HouseholdNotFoundError:
      description: Household does not exist
      allOf:
        - $ref: "#/components/schemas/RecordNotFoundError"
      example:
        type: E_HOUSEHOLD_NOT_FOUND
        code: 404
        message: Subscription plan does not exist
    SafeLocationNotFoundError:
      description: Safe Location does not exist
      allOf:
        - $ref: "#/components/schemas/RecordNotFoundError"
      example:
        type: E_SAFE_LOCATION_NOT_FOUND
        code: 404
        message: Safe Location does not exist
    UserNotConfirmedError:
      description: User has not been confirmed yet
      allOf:
        - $ref: "#/components/schemas/UnauthorizedError"
      example:
        type: E_USER_NOT_CONFIRMED
        code: 401
        message: User has not been confirmed yet
    RefreshTokenExpiredError:
      description: Refresh token expired, new login required
      allOf:
        - $ref: "#/components/schemas/UnauthorizedError"
      example:
        type: E_REFRESH_TOKEN_EXPIRED
        code: 401
        message: Refresh token expired, new login required
    ConfirmationTokenExpiredError:
      description: Confirmation token expired, another email with new link has been sent
      allOf:
        - $ref: "#/components/schemas/UnauthorizedError"
      example:
        type: E_CONFIRMATION_TOKEN_EXPIRED
        code: 401
        message: The user was not authorized
    PasswordResetTokenExpiredError:
      description: Password reset token expired, request another password reset link
      allOf:
        - $ref: "#/components/schemas/UnauthorizedError"
      example:
        type: E_PASSWORD_RESET_TOKEN_EXPIRED
        code: 401
        message: Password reset token expired, request another password reset link
    InvitationTokenExpiredError:
      description: Invitation token expired
      allOf:
        - $ref: "#/components/schemas/UnauthorizedError"
      example:
        type: E_INVITATION_TOKEN_EXPIRED
        code: 401
        message: Password reset token expired
    InternalServerError:
      description: Internal server error
      allOf:
        - $ref: "#/components/schemas/UnauthorizedError"
      example:
        type: E_INTERNAL_SERVER_ERROR
        code: 401
        message: Internal server error
    PasswordResetTokenAlreadyUsedError:
      description: Password reset token has already been used
      allOf:
        - $ref: "#/components/schemas/ConflictError"
      example:
        type: E_PASSWORD_RESET_TOKEN_ALREADY_USED
        code: 409
        message: Password reset token has already been used
    InvitationTokenAlreadyUsedError:
      description: Invitation token has already been used
      allOf:
        - $ref: "#/components/schemas/ConflictError"
      example:
        type: E_INVITATION_TOKEN_ALREADY_USED
        code: 409
        message: Invitation token has already been used
    UserAlreadyConfirmedError:
      description: User account has already been confirmed
      allOf:
        - $ref: "#/components/schemas/ConflictError"
      example:
        type: E_USER_ALREADY_CONFIRMED
        code: 409
        message: User account has already been confirmed
    AppleTokenExpired:
      description: Apple token has expired
      allOf:
        - $ref: "#/components/schemas/UnauthorizedError"
      example:
        type: E_APPLE_TOKEN_EXPIRED
        code: 401
        message: Apple token has expired
    AppleLoginError:
      description: Apple sign in has failed
      allOf:
        - $ref: "#/components/schemas/UnauthorizedError"
      example:
        type: E_APPLE_LOGIN_FAILED
        code: 401
        message: Apple sign in has failed
    GoogleLoginError:
      description: Google sign in has failed
      allOf:
        - $ref: "#/components/schemas/UnauthorizedError"
      example:
        type: E_GOOGLE_LOGIN_FAILED
        code: 401
        message: Google sign in has failed
    SubscriptionRequiredError:
      description: Valid subscription required for this action
      allOf:
        - $ref: "#/components/schemas/UnauthorizedError"
      example:
        type: E_SUBSCRIPTION_REQUIRED
        code: 401
        message: Valid subscription required for this action
    CommitTransactionErrorWrapper:
      description: Error wrapper to propagate error out of transaction scope without a
        rollback
      allOf:
        - $ref: "#/components/schemas/Error"
      example:
        type: ""
        code: 500
        message: Error wrapper to propagate error out of transaction scope without a
          rollback
    AlreadyUnsubscribedError:
      description: This subscription's automatic renewal has already been canceled
      allOf:
        - $ref: "#/components/schemas/ConflictError"
      example:
        type: E_ALREADY_UNSUBSCRIBED
        code: 409
        message: This subscription's automatic renewal has already been canceled
    InvalidAppleReceiptError:
      description: The Apple App store receipt provided by user validation has failed
      allOf:
        - $ref: "#/components/schemas/Error"
      example:
        type: E_INVALID_APPLE_RECEIPT
        code: 403
        message: Invalid response from App Store with status 123
    InvalidBundleIdError:
      description: The application bundle id does not match
      allOf:
        - $ref: "#/components/schemas/Error"
      example:
        type: E_INVALID_APP_BUNDLE_ID
        code: 403
        message: "Invalid application bundleId: com.google.trustme"
    PurchaseNotFoundError:
      description: The sent receipt does not icnlude the specified transaction
      allOf:
        - $ref: "#/components/schemas/Error"
      example:
        type: E_PURCHASE_NOT_FOUND
        code: 404
        message: Purchase 1234 was not found on the receipt
    PurchaseAlreadyProcessedError:
      description: The sent purcahase has already been received and processed
      allOf:
        - $ref: "#/components/schemas/Error"
      example:
        type: E_PURCHASE_ALREADY_PROCESSED
        code: 409
        message: Purchase 1234 has been already processed
    SubscriptionCancelationNotSupportedError:
      description: Only Stripe subscriptions can be canceled via this endpoint (not
        apple in-app purchased subscriptions)
      allOf:
        - $ref: "#/components/schemas/Error"
      example:
        type: E_SUBSCRIPTION_CANCELATION_NOT_SUPPORTED
        code: 409
        message: apple subscription type cannot be canceled via this endpoint. Only
          Stripe subscription cancelation is supported`
    InvalidStepsError:
      description: Step IDs used in reordering of the chapter include ID of steps that
        are not in the chapter, miss some steps or have some duplicated
      allOf:
        - $ref: "#/components/schemas/ValidationError"
      example:
        type: E_INVALID_STEPS
        code: 400
        message: Step IDs used in reordering of the chapter include ID of steps that are
          not in the chapter, miss some steps or have some duplicated
    InvalidChaptersOrderError:
      description: Ordered chapter ids count does not match actual chapters count
      allOf:
        - $ref: "#/components/schemas/ValidationError"
      example:
        type: E_INVALID_CHAPTERS_ORDER
        code: 400
        message: Ordered chapter ids count does not match actual chapters count
    InvalidRiskSpecificPlansError:
      description: Risk specific plans (RSP) IDs used in reordering of the event
        include IDs of RSP that are not in the event, miss some RSP or have some
        duplicated
      allOf:
        - $ref: "#/components/schemas/ValidationError"
      example:
        type: E_INVALID_RISK_SPECIFIC_PLANS
        code: 400
        message: Risk specific plans (RSP) IDs used in reordering of the event include
          IDs of RSP that are not in the event, miss some RSP or have some
          duplicated
paths:
  /admin/activities:
    post:
      summary: Create activity
      tags:
        - Admin
        - Admin/Activities
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateActivity"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Activity"
        "400":
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestError"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenError"
    get:
      summary: List activities
      tags:
        - Admin
        - Admin/Activities
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: page
          schema:
            $ref: "#/components/Pagination/page"
          description: Page for pagination (starts from 0)
        - in: query
          name: pageSize
          schema:
            $ref: "#/components/Pagination/pageSize"
          description: Page size for pagination
        - in: query
          name: orderDirection
          schema:
            $ref: "#/components/Pagination/orderDirection"
          description: Direction for ordering
        - in: query
          name: orderColumn
          schema:
            type: string
            enum:
              - id
              - name
              - createdAt
              - theme
          description: Column for ordering
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ActivitiesList"
        "400":
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestError"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenError"
  "/admin/activities/{id}":
    patch:
      summary: Update activity
      tags:
        - Admin
        - Admin/Activities
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          schema:
            type: number
          required: true
          description: Activity ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateActivity"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Activity"
        "400":
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestError"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenError"
    get:
      summary: Get activity
      tags:
        - Admin
        - Admin/Activities
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          schema:
            type: number
          required: true
          description: Activity ID
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Activity"
        "400":
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestError"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenError"
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ActivityNotFoundError"
    delete:
      operationId: deleteAdminActivity
      summary: Delete activity
      description: Delete activity
      tags:
        - Admin
        - Admin/Events
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          schema:
            type: number
          required: true
          description: activity ID
      responses:
        "204":
          description: Event successfully deleted (no content)
        "400":
          description: Invalid url param
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestParamsError"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        "403":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenError"
        "404":
          description: Event not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EventNotFoundError"
  /admin/activity-groups:
    get:
      summary: List activity groups
      tags:
        - Admin
        - Admin/Activities
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: page
          schema:
            $ref: "#/components/Pagination/page"
          description: Page for pagination (starts from 0)
        - in: query
          name: pageSize
          schema:
            $ref: "#/components/Pagination/pageSize"
          description: Page size for pagination
        - in: query
          name: orderDirection
          schema:
            $ref: "#/components/Pagination/orderDirection"
          description: Direction for ordering
        - in: query
          name: orderColumn
          schema:
            type: string
            enum:
              - id
              - name
              - createdAt
              - theme
          description: Column for ordering
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ActivityGroupsList"
        "400":
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestError"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenError"
    post:
      summary: Create new activity group
      tags:
        - Admin
        - Admin/ActivityGroups
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateActivityGroup"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ActivityGroup"
        "400":
          description: Invalid url param
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestParamsError"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        "403":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenError"
  "/admin/activity-groups/{id}":
    get:
      summary: Get activity group (admin)
      tags:
        - Admin
        - Admin/ActivityGroups
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          schema:
            type: number
          required: true
          description: ActivityGroup ID
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ActivityGroup"
        "400":
          description: Invalid url param
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestParamsError"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        "403":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenError"
        "404":
          description: ActivityGroup not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ActivityGroupNotFoundError"
    patch:
      summary: Patch ActivityGroup
      tags:
        - Admin
        - Admin/ActivityGroups
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          schema:
            type: number
          required: true
          description: ActivityGroup ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateActivityGroup"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ActivityGroup"
        "400":
          description: Invalid url param
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestParamsError"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        "403":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenError"
        "404":
          description: ActivityGroup not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ComputationNotFoundError"
  /admin/app-configurations:
    patch:
      summary: Update configuration
      tags:
        - Admin
        - Admin/Configuration
      security:
        - BearerAuth: []
      responses:
        "200":
          description: Success
        "400":
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestError"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenError"
    get:
      summary: Get app configuration
      tags:
        - Admin
        - Admin/Configuration
      security:
        - BearerAuth: []
      responses:
        "200":
          description: Success
        "400":
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestError"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenError"
  /admin/assets/upload-url:
    post:
      summary: Generate presigned request to upload image
      tags:
        - Admin
        - Admin/Assets
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UploadImageFile"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UploadImageAdmin"
        "400":
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestError"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenError"
  /admin/chapters:
    post:
      summary: Create chapter
      tags:
        - Admin
        - Admin/Chapters
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateChapter"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Chapter"
        "400":
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestError"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenError"
        "404":
          description: Activity not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ActivityNotFoundError"
    get:
      summary: List chapters
      tags:
        - Admin
        - Admin/Chapters
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: page
          schema:
            $ref: "#/components/Pagination/page"
          description: Page for pagination (starts from 0)
        - in: query
          name: pageSize
          schema:
            $ref: "#/components/Pagination/pageSize"
          description: Page size for pagination
        - in: query
          name: orderDirection
          schema:
            $ref: "#/components/Pagination/orderDirection"
          description: Direction for ordering
        - in: query
          name: orderColumn
          schema:
            type: string
            enum:
              - id
              - name
              - createdAt
          description: Column for ordering
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ChaptersList"
        "400":
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestError"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenError"
  "/admin/chapters/{id}":
    patch:
      summary: Update chapter
      tags:
        - Admin
        - Admin/Chapters
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          schema:
            type: number
          required: true
          description: Chapter ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateChapter"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Chapter"
        "400":
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestError"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenError"
        "404":
          description: Activity not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ActivityNotFoundError"
    get:
      summary: Get chapter
      tags:
        - Admin
        - Admin/Chapters
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          schema:
            type: number
          required: true
          description: Chapter ID
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Chapter"
        "400":
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestError"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenError"
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ChapterNotFoundError"
    delete:
      operationId: deleteAdminChapter
      summary: Delete chapter
      description: Delete chapter
      tags:
        - Admin
        - Admin/Events
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          schema:
            type: number
          required: true
          description: chapter ID
      responses:
        "204":
          description: Event successfully deleted (no content)
        "400":
          description: Invalid url param
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestParamsError"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        "403":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenError"
        "404":
          description: Event not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EventNotFoundError"
  "/admin/chapters/event/{id}":
    get:
      summary: List chapters
      tags:
        - Admin
        - Admin/Chapters
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          schema:
            type: number
            required: true
          description: Chapter Id to list events for
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EventList"
        "400":
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestError"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenError"
  /admin/computations:
    get:
      operationId: listAdminComputations
      summary: List computations
      description: Get paginated list of computations
      tags:
        - Admin
        - Admin/Computations
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: page
          schema:
            $ref: "#/components/Pagination/page"
          description: Page for pagination (starts from 0)
        - in: query
          name: pageSize
          schema:
            $ref: "#/components/Pagination/pageSize"
          description: Page size for pagination
        - in: query
          name: orderDirection
          schema:
            $ref: "#/components/Pagination/orderDirection"
          description: Direction for ordering
        - in: query
          name: orderColumn
          schema:
            type: string
            enum:
              - id
              - name
              - createdAt
          description: Column for ordering
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ComputationsList"
        "400":
          description: Invalid url param
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestParamsError"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        "403":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenError"
    post:
      operationId: createAdminComputation
      summary: Create computation
      description: Crete new computation
      tags:
        - Admin
        - Admin/Computations
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateComputation"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Computation"
        "400":
          description: Invalid url param
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestParamsError"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        "403":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenError"
  "/admin/computations/{id}":
    get:
      operationId: getAdminComputation
      summary: Get computation (admin)
      description: Get single computation
      tags:
        - Admin
        - Admin/Computations
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          schema:
            type: number
          required: true
          description: Computation ID
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Computation"
        "400":
          description: Invalid url param
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestParamsError"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        "403":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenError"
        "404":
          description: Computation not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ComputationNotFoundError"
    patch:
      operationId: updateAdminComputation
      summary: Patch Computation
      description: Update computation attributes
      tags:
        - Admin
        - Admin/Computations
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          schema:
            type: number
          required: true
          description: Computation ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateComputation"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Computation"
        "400":
          description: Invalid url param
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestParamsError"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        "403":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenError"
        "404":
          description: Computation not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ComputationNotFoundError"
  "/admin/steps/{id}":
    delete:
      operationId: deleteAdminStep
      summary: Delete step
      description: Update Step's attribute `deletedAt` to current timestamp.
      tags:
        - Admin
        - Admin/Steps
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          schema:
            type: number
          required: true
          description: Step ID
      responses:
        "204":
          description: Step successfully deleted (no content)
        "400":
          description: Invalid url param
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestParamsError"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        "403":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenError"
        "404":
          description: Step not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StepNotFoundError"
    get:
      operationId: getAdminStep
      summary: Get step (admin)
      description: Get single Step
      tags:
        - Admin
        - Admin/Steps
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          schema:
            type: number
          required: true
          description: Step ID
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Step"
        "400":
          description: Invalid url param
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestParamsError"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        "403":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenError"
        "404":
          description: Step not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StepNotFoundError"
    patch:
      operationId: updateAdminStep
      summary: Patch step
      description: Update Step's attributes
      tags:
        - Admin
        - Admin/Steps
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          schema:
            type: number
          required: true
          description: Step ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateStep"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Step"
        "400":
          description: Invalid url param
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestParamsError"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        "403":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenError"
        "404":
          description: Steps not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StepNotFoundError"
  /admin/emergency-modes:
    get:
      operationId: listAdminEmergencyModes
      summary: List emergency modes
      description: Get paginated list of emergency modes
      tags:
        - Admin
        - Admin/EmergencyMode
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: page
          schema:
            type: number
            default: 0
          description: Page for pagination (starts from 0)
        - in: query
          name: pageSize
          schema:
            type: number
            default: 15
          description: Page size for pagination
        - in: query
          name: orderColumn
          schema:
            type: string
            enum:
              - id
              - email
              - createdAt
          description: Column for ordering
        - in: query
          name: orderDirection
          schema:
            type: string
            enum:
              - asc
              - desc
          description: Direction for ordering
      responses:
        "200":
          description: Successful response
        "400":
          description: Invalid url param
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestParamsError"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        "403":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenError"
    post:
      operationId: createAdminEmergencyMode
      summary: Create emergency mode
      description: Crete new emergency mode
      tags:
        - Admin
        - Admin/EmergencyMode
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateEmergencyMode"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EmergencyMode"
        "400":
          description: Invalid url param
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestParamsError"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        "403":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenError"
        "404":
          description: Emergency mode not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecordNotFoundError"
  "/admin/emergency-modes/{id}":
    get:
      operationId: getAdminEmergencyModes
      summary: Get emergencyMode (admin)
      description: Get single emergencyMode
      tags:
        - Admin
        - Admin/EmergencyMode
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          schema:
            type: number
          required: true
          description: Emergency mode ID
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EmergencyMode"
        "400":
          description: Invalid url param
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestParamsError"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        "403":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenError"
        "404":
          description: Emergency mode not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecordNotFoundError"
    patch:
      operationId: updateAdminEmergencyModes
      summary: Patch emergency mode
      description: Update Emergency modes's attributes
      tags:
        - Admin
        - Admin/EmergencyMode
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          schema:
            type: number
          required: true
          description: Emergency mode ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateEmergencyMode"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EmergencyMode"
        "400":
          description: Invalid url param
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestParamsError"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        "403":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenError"
        "404":
          description: Emergency mode not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecordNotFoundError"
    delete:
      operationId: deleteAdminEmergencyMode
      summary: Delete emergency mode
      tags:
        - Admin
        - Admin/EmergencyModes
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          schema:
            type: number
          required: true
          description: Emergency mode ID
      responses:
        "204":
          description: Successful delete(no content)
        "400":
          description: Invalid url param
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestParamsError"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        "403":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenError"
        "404":
          description: Emergency mode not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecordNotFoundError"
  /admin/events:
    get:
      operationId: listAdminEvents
      summary: List events
      description: Get paginated list of events
      tags:
        - Admin
        - Admin/Events
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: page
          schema:
            type: number
            default: 0
          description: Page for pagination (starts from 0)
        - in: query
          name: pageSize
          schema:
            type: number
            default: 15
          description: Page size for pagination
        - in: query
          name: orderColumn
          schema:
            type: string
            enum:
              - id
              - createdAt
          description: Column for ordering
        - in: query
          name: orderDirection
          schema:
            type: string
            enum:
              - asc
              - desc
          description: Direction for ordering
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EventsList"
        "400":
          description: Invalid url param
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestParamsError"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        "403":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenError"
    post:
      operationId: createAdminEvent
      summary: Create event
      description: Crete new event
      tags:
        - Admin
        - Admin/Events
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateEvent"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Event"
        "400":
          description: Invalid url param
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestParamsError"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        "403":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenError"
        "404":
          description: Event type not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EventTypeNotFoundError"
  "/admin/events/{id}":
    get:
      operationId: getAdminEvent
      summary: Get event (admin)
      description: Get single event
      tags:
        - Admin
        - Admin/Events
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          schema:
            type: number
          required: true
          description: Event ID
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Event"
        "400":
          description: Invalid url param
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestParamsError"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        "403":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenError"
        "404":
          description: Event not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EventNotFoundError"
    patch:
      operationId: updateAdminEvent
      summary: Patch event
      description: Update event's attributes
      tags:
        - Admin
        - Admin/Events
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          schema:
            type: number
          required: true
          description: Event ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateEvent"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Event"
        "400":
          description: Invalid url param
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestParamsError"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        "403":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenError"
        "404":
          description: Event not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EventNotFoundError"
    delete:
      operationId: deleteAdminEvent
      summary: Delete event
      description: Update Event's attribute `deletedAt` to current timestamp.
      tags:
        - Admin
        - Admin/Events
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          schema:
            type: number
          required: true
          description: Event ID
      responses:
        "204":
          description: Event successfully deleted (no content)
        "400":
          description: Invalid url param
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestParamsError"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        "403":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenError"
        "404":
          description: Event not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EventNotFoundError"
  /admin/input-step-data:
    get:
      operationId: listAdminInputStepData
      summary: List input step data
      description: Get paginated list of input step data
      tags:
        - Admin
        - Admin/InputStepData
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: page
          schema:
            $ref: "#/components/Pagination/page"
          description: Page for pagination (starts from 0)
        - in: query
          name: pageSize
          schema:
            $ref: "#/components/Pagination/pageSize"
          description: Page size for pagination
        - in: query
          name: orderDirection
          schema:
            $ref: "#/components/Pagination/orderDirection"
          description: Direction for ordering
        - in: query
          name: orderColumn
          schema:
            type: string
            enum:
              - id
              - name
              - createdAt
          description: Column for ordering
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InputStepDataList"
        "400":
          description: Invalid url param
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestParamsError"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        "403":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenError"
    post:
      operationId: createAdminInputStepData
      summary: Create input step data
      description: Crete new input step data
      tags:
        - Admin
        - Admin/Inventories
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateInputStepData"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InputStepData"
        "400":
          description: Invalid url param
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestParamsError"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        "403":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenError"
  "/admin/input-step-data/{id}":
    get:
      operationId: getAdminInputStepData
      summary: Get Input step data (admin)
      description: Get single input step data
      tags:
        - Admin
        - Admin/Inventories
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          schema:
            type: number
          required: true
          description: input step data ID
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InputStepData"
        "400":
          description: Invalid url param
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestParamsError"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        "403":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenError"
        "404":
          description: Input step data not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InputStepDataNotFoundError"
    patch:
      operationId: updateAdminInputStepData
      summary: Patch Input step data
      description: Update input step data attributes
      tags:
        - Admin
        - Admin/Inventories
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          schema:
            type: number
          required: true
          description: Input step data ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateInputStepData"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InputStepData"
        "400":
          description: Invalid url param
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestParamsError"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        "403":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenError"
        "404":
          description: Input step data not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InputStepDataNotFoundError"
  /admin/inventories:
    get:
      operationId: listAdminInventories
      summary: List inventories
      description: Get paginated list of inventories
      tags:
        - Admin
        - Admin/Inventories
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: page
          schema:
            $ref: "#/components/Pagination/page"
          description: Page for pagination (starts from 0)
        - in: query
          name: pageSize
          schema:
            $ref: "#/components/Pagination/pageSize"
          description: Page size for pagination
        - in: query
          name: orderDirection
          schema:
            $ref: "#/components/Pagination/orderDirection"
          description: Direction for ordering
        - in: query
          name: orderColumn
          schema:
            type: string
            enum:
              - id
              - name
              - createdAt
          description: Column for ordering
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InventoriesList"
        "400":
          description: Invalid url param
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestParamsError"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        "403":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenError"
    post:
      operationId: createAdminInventory
      summary: Create inventory
      description: Crete new inventory
      tags:
        - Admin
        - Admin/Inventories
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateInventory"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Inventory"
        "400":
          description: Invalid url param
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestParamsError"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        "403":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenError"
  "/admin/inventories/{id}":
    get:
      operationId: getAdminInventory
      summary: Get inventory (admin)
      description: Get single inventory
      tags:
        - Admin
        - Admin/Inventories
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          schema:
            type: number
          required: true
          description: Inventory ID
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Inventory"
        "400":
          description: Invalid url param
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestParamsError"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        "403":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenError"
        "404":
          description: Inventory not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InventoryNotFoundError"
    patch:
      operationId: updateAdminInventory
      summary: Patch Inventory
      description: Update inventory attributes
      tags:
        - Admin
        - Admin/Inventories
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          schema:
            type: number
          required: true
          description: Inventory ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateInventory"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Inventory"
        "400":
          description: Invalid url param
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestParamsError"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        "403":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenError"
        "404":
          description: Inventory not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InventoryNotFoundError"
    delete:
      operationId: deleteAdminInventory
      summary: Delete inventory
      description: Delete inventory
      tags:
        - Admin
        - Admin/Events
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          schema:
            type: number
          required: true
          description: inventory ID
      responses:
        "204":
          description: Inventory successfully deleted (no content)
        "400":
          description: Invalid url param
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestParamsError"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        "403":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenError"
        "404":
          description: Event not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EventNotFoundError"
  "/admin/inventories/categories/{id}":
    patch:
      operationId: updateAdminInventoryCategory
      summary: Patch Inventory
      description: Update inventory category attributes
      tags:
        - Admin
        - Admin/Inventories
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          schema:
            type: number
          required: true
          description: Inventory ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateInventoryCategory"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InventoryCategory"
        "400":
          description: Invalid url param
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestParamsError"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        "403":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenError"
        "404":
          description: Inventory category not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InventoryCategoryNotFoundError"
    get:
      operationId: GetAdminInventoryCategory
      summary: Get Inventory
      description: Get inventory category attributes
      tags:
        - Admin
        - Admin/Inventories
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          schema:
            type: number
          required: true
          description: Inventory ID
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InventoryCategory"
        "400":
          description: Invalid url param
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestParamsError"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        "403":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenError"
        "404":
          description: Inventory category not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InventoryCategoryNotFoundError"
  /admin/inventories/categories/:
    get:
      operationId: listAdminInventoryCategory
      summary: List Inventory
      description: List inventory category attributes
      tags:
        - Admin
        - Admin/Inventories
      security:
        - BearerAuth: []
      responses:
        "200":
          description: Successful response
          content:
            type: array
            items:
              application/json:
                schema:
                  $ref: "#/components/schemas/InventoryCategory"
        "400":
          description: Invalid url param
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestParamsError"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        "403":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenError"
        "404":
          description: Inventory category not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InventoryCategoryNotFoundError"
  /admin/push-notifications:
    post:
      operationId: snedPushNotifications
      summary: Send push notifications
      description: Send push notifications to all device tokens for users with address
        in the designated zipcode range
      tags:
        - Admin
        - Admin/PushNotifications
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SendPushNotifications"
      responses:
        "204":
          description: Successful response (no content)
        "400":
          description: Validaion error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestBodyError"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        "403":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenError"
  "/admin/events/{eventId}/risk-specific-plans":
    post:
      summary: Create risk specific plan for event
      tags:
        - Admin
        - Admin/RiskSpecificPlan
      security:
        - BearerAuth: []
      parameters:
        - name: eventId
          in: path
          schema:
            type: number
          required: true
          description: Event id
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AdminRiskSpecificPlan"
      responses:
        "201":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AdminRiskSpecificPlan"
        "400":
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestError"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenError"
    get:
      summary: List risk specific plan
      tags:
        - Admin
        - Admin/RiskSpecificPlan
      security:
        - BearerAuth: []
      parameters:
        - name: eventId
          in: path
          schema:
            type: number
          required: true
          description: Event id
        - in: query
          name: page
          schema:
            type: number
            default: 0
          description: Page for pagination (starts from 0)
        - in: query
          name: pageSize
          schema:
            type: number
            default: 15
          description: Page size for pagination
        - in: query
          name: orderColumn
          schema:
            type: string
            enum:
              - id
              - email
              - createdAt
          description: Column for ordering
        - in: query
          name: orderDirection
          schema:
            type: string
            enum:
              - asc
              - desc
          description: Direction for ordering
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AdminRiskSpecificPlan"
        "400":
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestError"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenError"
  "/admin/events/{eventId}/risk-specific-plans/{id}":
    update:
      summary: Update risk specific plan for event
      tags:
        - Admin
        - Admin/RiskSpecificPlan
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          schema:
            type: number
          required: true
          description: Risk specific plan item id
        - name: eventId
          in: path
          schema:
            type: number
          required: true
          description: Event id
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AdminRiskSpecificPlan"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AdminRiskSpecificPlan"
        "400":
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestError"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenError"
    get:
      summary: Show risk specific plan
      tags:
        - Admin
        - Admin/RiskSpecificPlan
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          schema:
            type: number
          required: true
          description: Risk specific item id
        - name: eventId
          in: path
          schema:
            type: number
          required: true
          description: Event id
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RiskSpecificPlan"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AdminRiskSpecificPlan"
        "400":
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestError"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenError"
    delete:
      summary: Delete risk specific plan
      tags:
        - Admin
        - Admin/RiskSpecificPlan
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          schema:
            type: number
          required: true
          description: Risk specific plan item id
        - name: eventId
          in: path
          schema:
            type: number
          required: true
          description: Event id
      responses:
        "204":
          description: Success
        "400":
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestError"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenError"
  /admin/sessions/native:
    post:
      operationId: postAdminSessionsNative
      summary: Admin Login with Email/Password
      description: Verifies if `username` and `password` combination matches existing
        admin user and returns `accessToken` with profile details. To use the
        `accessToken` for subsequent requests set authorization header like
        shown below.
      tags:
        - admin
        - Sessions
      requestBody:
        description: Admin user's credentials
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateSessionAdmin"
      responses:
        "201":
          description: Successful login
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthorizedUser"
        "400":
          description: Wrong credentials or request body
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestError"
        "401":
          description: Admon user not confirmed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserNotConfirmedError"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenError"
        "404":
          description: Admin user doesn't exist
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserNotFoundError"
  /admin/steps:
    get:
      operationId: listAdminSteps
      summary: List steps
      description: Get paginated list of Steps
      tags:
        - Admin
        - Admin/Steps
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: page
          schema:
            type: number
            default: 0
          description: Page for pagination (starts from 0)
        - in: query
          name: pageSize
          schema:
            type: number
            default: 15
          description: Page size for pagination
        - in: query
          name: orderColumn
          schema:
            type: string
            enum:
              - id
              - email
              - createdAt
          description: Column for ordering
        - in: query
          name: orderDirection
          schema:
            type: string
            enum:
              - asc
              - desc
          description: Direction for ordering
        - in: query
          name: searchTerm
          schema:
            type: string
          description: Search term to filter on
        - in: query
          name: chapterId
          schema:
            type: string
          description: ChapterId to filter on
        - in: query
          name: textSearch
          schema:
            type: string
          description: text to search values on
        - in: query
          name: actionType
          schema:
            type: string
          description: filter on steps containing actionType
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StepsList"
        "400":
          description: Invalid url param
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestParamsError"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        "403":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenError"
    post:
      operationId: createAdminStep
      summary: Create step
      description: Crete new Step
      tags:
        - Admin
        - Admin/Steps
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateStep"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Step"
        "400":
          description: Invalid url param
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestParamsError"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        "403":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenError"
        "404":
          description: Step not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StepNotFoundError"
  /admin/users:
    get:
      operationId: listAdminUsers
      summary: List users
      description: Get paginated list of users
      tags:
        - Admin
        - Admin/Users
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: page
          schema:
            type: number
            default: 0
          description: Page for pagination (starts from 0)
        - in: query
          name: pageSize
          schema:
            type: number
            default: 15
          description: Page size for pagination
        - in: query
          name: orderColumn
          schema:
            type: string
            enum:
              - id
              - email
              - createdAt
          description: Column for ordering
        - in: query
          name: orderDirection
          schema:
            type: string
            enum:
              - asc
              - desc
          description: Direction for ordering
        - in: query
          name: searchTerm
          description: Filter search term
          schema:
            type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AdminUsersList"
        "400":
          description: Invalid query
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestQueryStringError"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        "403":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenError"
  "/admin/users/{id}":
    get:
      operationId: getAdminUser
      summary: Get user
      description: Get single user data
      tags:
        - Admin
        - Admin/Users
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          schema:
            type: number
          required: true
          description: User ID
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AdminUser"
        "400":
          description: Invalid body
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestParamsError"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        "403":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenError"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserNotFoundError"
    patch:
      operationId: updateAdminUser
      summary: Patch user
      description: Update User's attributes.
      tags:
        - Admin
        - Admin/Users
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          schema:
            type: number
          required: true
          description: User ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AdminUser"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AdminUser"
        "400":
          description: Invalid body
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/InvalidRequestBodyError"
                  - $ref: "#/components/schemas/InvalidRequestParamsError"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        "403":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenError"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserNotFoundError"
  "/v1/auth/activities/{id}":
    get:
      operationId: getActivity
      summary: Get activity
      description: Get single activity
      tags:
        - Activities
        - v1
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          schema:
            type: number
          required: true
          description: Activity ID
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Activity"
        "400":
          description: Invalid url param
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestParamsError"
        "403":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenError"
        "404":
          description: Activity not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ActivityNotFoundError"
  "/v1/auth/activities/{id}/progress/":
    get:
      operationId: getActivity progress
      summary: Get activity progress
      description: Get progress of activity
      tags:
        - Activities
        - v1
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          schema:
            type: number
          required: true
          description: Activity ID
      responses:
        "200":
          description: Successful response
        "400":
          description: Invalid url param
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestParamsError"
        "403":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenError"
        "404":
          description: Activity not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ActivityNotFoundError"
  "/v1/auth/answers/{stepId}/{dataType}/{contentGuid}":
    post:
      operationId: createAnswer
      summary: Create answer for step
      description: Create answer for step
      tags:
        - v1
        - Answers
      parameters:
        - in: path
          name: stepId
          schema:
            type: string
          description: Step id of answer
        - in: path
          name: dataType
          schema:
            type: string
            enum:
              - input
              - reminder
              - multiselect
              - photo
              - video
              - inventory
          description: Step data type
        - in: path
          name: contentGuid
          schema:
            type: string
          description: Unique guid of step content
      requestBody:
        description: Answer value JSON
        required: false
        content:
          application/json:
            schema:
              $ref: "#"
      responses:
        "204":
          description: Successful response
  "/v1/auth/answers/{stepId}":
    get:
      operationId: getAnswers
      summary: Get answers for step
      description: Get answers for step
      tags:
        - v1
        - Answers
      parameters:
        - in: path
          name: stepId
          schema:
            type: string
          description: Step id of answer
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetAnswersResponse"
  /v1/app-configurations:
    get:
      summary: Get app configuration
      tags:
        - Admin
        - Admin/Configuration
      security:
        - BearerAuth: []
      responses:
        "200":
          description: Success
        "400":
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestError"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenError"
  "/v1/chapters/{id}/completed":
    put:
      operationId: setCompletedChapter
      summary: Complete chapter
      description: Set chapter as completed for given user
      tags:
        - Chapters
      parameters:
        - name: id
          in: path
          schema:
            type: number
          required: true
          description: Chapter ID
      responses:
        "200":
          description: Chapter progress successfully saved
          content:
            application/json:
              schema:
                description: Advanced level flag
                type: object
                porperties:
                  advancedLevel: boolean
                  customCompletedMessage:
                    type: object
                    properties:
                      title: string
                      body: string
        "400":
          description: Invalid url param
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestParamsError"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        "404":
          description: Chapter not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ChapterNotFoundError"
  /v1/chapters/activity-chapters:
    post:
      operationId: getChaptersForActivity
      summary: Get chapters for activity
      description: Get chapters for activity
      tags:
        - Chapters
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ChaptersActivityId"
      responses:
        "200":
          description: Chapter for activity successfully listed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ChaptersForActivity"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        "404":
          description: Activity not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ActivityNotFoundError"
  /v1/covid19/progress:
    get:
      operationId: getCovid19Progress
      summary: Get Covid19 progress
      description: Get progress of user reading covid related pages
      tags:
        - v1
        - Covid 19
      parameters:
        - in: query
          name: email
          schema:
            type: string
          description: User's email for identification
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Covid19ProgressResponse"
        "400":
          description: Validaion error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestBodyError"
  /covid19/progress:
    post:
      operationId: postCovid19Progress
      summary: Port Covid19 progress
      description: Updates user's progress of reading the covid related pages
      tags:
        - v1
        - Covid 19
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Covid19Progress"
      responses:
        "201":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Covid19ProgressResponse"
        "400":
          description: Validaion error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestBodyError"
  /v1/auth/dashboard-real:
    get:
      operationId: getDashboard
      tags:
        - v1
        - Dashboard
      summary: Fetches dashbaord data
      description: Fetches all the data that appear in the app after login
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserDashboard"
        "401":
          description: Unauthorized User
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
  /v1/auth/documents:
    post:
      operationId: createDocument
      summary: Create Document
      description: Marks selected file as document
      tags:
        - v1
        - Documents
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateDocument"
      responses:
        "201":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DocumentResponse"
        "404":
          description: File not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FileNotFoundError"
        "422":
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestBodyError"
    get:
      operationId: listDocuments
      summary: List Document
      description: Get list of Documents for user
      tags:
        - v1
        - Documents
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  total:
                    type: number
                    description: Total number of documents in response
                  results:
                    type: array
                    description: List of documents
                    items:
                      $ref: "#/components/schemas/DocumentResponse"
        "404":
          description: File not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FileNotFoundError"
        "422":
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestBodyError"
  "/v1/auth/documents/{uuid}":
    get:
      operationId: getDocument
      summary: Get Document
      description: Get Document by UUID
      tags:
        - v1
        - Documents
      parameters:
        - name: uuid
          in: path
          schema:
            type: string
            format: uuid
          required: true
          description: File UUID
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DocumentResponse"
        "404":
          description: File not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FileNotFoundError"
        "422":
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestBodyError"
    patch:
      operationId: updateDocument
      summary: Update Document
      description: Updete document properties
      tags:
        - v1
        - Documents
      parameters:
        - name: uuid
          in: path
          schema:
            type: string
            format: uuid
          required: true
          description: File UUID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateDocument"
      responses:
        "201":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DocumentResponse"
        "404":
          description: File not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FileNotFoundError"
        "422":
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestBodyError"
    post:
      operationId: deleteDocument
      summary: Delete Document
      description: Remove Document from DB and S3
      tags:
        - v1
        - Documents
      parameters:
        - name: uuid
          in: path
          schema:
            type: string
            format: uuid
          required: true
          description: File UUID
      responses:
        "204":
          description: Successful response
        "404":
          description: File not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FileNotFoundError"
        "422":
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestBodyError"
  /v1/auth/emergency-contacts:
    post:
      summary: Create emergency contact
      security:
        - BearerAuth: []
      tags:
        - v1
        - EmergencyContact
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateEmergencyContact"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EmergencyContact"
    get:
      summary: List emergency contact
      security:
        - BearerAuth: []
      tags:
        - v1
        - EmergencyContact
      responses:
        "200":
          description: Successful response
          content:
            type: array
            items:
              application/json:
                schema:
                  $ref: "#/components/schemas/EmergencyContact"
  "/v1/auth/emergency-contacts/{id}":
    patch:
      summary: Update emergency contact
      tags:
        - v1
        - EmergencyContact
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          schema:
            type: number
          required: true
          description: Emergency contact id
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateEmergencyContact"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EmergencyContact"
    get:
      summary: Get detail of emergency contact
      tags:
        - v1
        - EmergencyContact
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          schema:
            type: number
          required: true
          description: Emergency contact id
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EmergencyContact"
    delete:
      summary: Delete emergency contact
      tags:
        - v1
        - EmergencyContact
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          schema:
            type: number
          required: true
          description: Emergency contact id
      responses:
        "204":
          description: NoContent
  /v1/auth/events:
    get:
      operationId: listEvents
      summary: List events
      description: Get paginated list of events
      tags:
        - Events
        - v1
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: page
          schema:
            type: number
            default: 0
          description: Page for pagination (starts from 0)
        - in: query
          name: pageSize
          schema:
            type: number
            default: 15
          description: Page size for pagination
        - in: query
          name: orderColumn
          schema:
            type: string
            enum:
              - id
              - createdAt
          description: Column for ordering
        - in: query
          name: orderDirection
          schema:
            type: string
            enum:
              - asc
              - desc
          description: Direction for ordering
        - in: query
          name: includeEmergencyMode
          schema:
            type: boolean
            enum:
              - asc
              - desc
          description: Flag for including emergency mode
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EventsList"
        "400":
          description: Invalid url param
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestParamsError"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
  /v1/auth/risks:
    get:
      operationId: listRisks
      summary: List risks
      description: Get paginated list of risks - events ordered by importance and with
        labels (default/your area/common)
      tags:
        - Events
        - v1
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: page
          schema:
            type: number
            default: 0
          description: Page for pagination (starts from 0)
        - in: query
          name: pageSize
          schema:
            type: number
            default: 15
          description: Page size for pagination
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RiskList"
        "400":
          description: Invalid url param
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestParamsError"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
  "/v1/auth/events/{id}":
    get:
      operationId: getEvent
      summary: Get event
      description: Get single Event referenced by id
      tags:
        - Events
        - v1
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          schema:
            type: number
          required: true
          description: Event ID
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Event"
        "400":
          description: Invalid url param
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestParamsError"
        "403":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenError"
        "404":
          description: Event not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EventNotFoundError"
  "/v1/events/{id}/subscription":
    post:
      operationId: subscribeEvent
      summary: Subscribe event
      description: Subscribe single Event referenced by id
      tags:
        - Events
        - v1
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          schema:
            type: number
          required: true
          description: Event ID
      responses:
        "204":
          description: Successful response (no content)
        "400":
          description: Invalid url param
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestParamsError"
        "403":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenError"
        "404":
          description: Event not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EventNotFoundError"
    delete:
      operationId: unsubscribeEvent
      summary: Unsubscribe event
      description: Unsubscribe single Event referenced by id
      tags:
        - Events
        - v1
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          schema:
            type: number
          required: true
          description: Event ID
      responses:
        "204":
          description: Successful response (no content)
        "400":
          description: Invalid url param
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestParamsError"
        "403":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenError"
        "404":
          description: Event subscription not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EventsSubscriptionNotFoundError"
  /v1/auth/files:
    post:
      operationId: createFile
      summary: Upload File
      description: Returns signed url for uploading file to S3
      tags:
        - v1
        - Files
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UploadFile"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UploadFileResponse"
        "422":
          description: Validaion error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestBodyError"
  "/v1/auth/files/{uuid}":
    get:
      operationId: getFile
      summary: Download File
      description: Returns signed url for downloading file from S3
      tags:
        - v1
        - Files
      parameters:
        - name: uuid
          in: path
          schema:
            type: string
            format: uuid
          required: true
          description: File key
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UploadFileResponse"
        "422":
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestBodyError"
  /v1/auth/households/members:
    post:
      summary: Add household member
      tags:
        - Household
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateHouseholdMember"
      responses:
        "201":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HouseholdMember"
        "400":
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestError"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenError"
        "409":
          description: Household owner cannot be deleted
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictError"
              example:
                type: E_CONFLICT
                message: Household owner cannot be deleted
                statusCode: 409
    get:
      operationId: listHouseholdMembers
      summary: List household members
      description: List household members
      tags:
        - Household
      security:
        - BearerAuth: []
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HouseholdMember"
        "400":
          description: Invalid url param
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestParamsError"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
  /v1/auth/households/emergency-plan:
    get:
      operationId: getHouseholdPlan
      summary: Get households homepage screen content
      tags:
        - Household
      security:
        - BearerAuth: []
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HouseholdDashboard"
  "/v1/auth/households/members/{id}":
    get:
      operationId: getHouseholdMember
      summary: List household members
      description: Get a household member
      tags:
        - Household
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          description: Member id
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HouseholdMember"
        "404":
          description: Id does not exist for given user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HouseholdUserNotFoundError"
    delete:
      operationId: deleteHouseholdMember
      summary: Delete household members
      description: Get a household member
      tags:
        - Household
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          description: Member id
      responses:
        "204":
          description: Successful response
        "404":
          description: Household member not found for given user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HouseholdUserNotFoundError"
    patch:
      summary: Patch household member data
      tags:
        - Household
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateHouseholdMember"
      parameters:
        - in: path
          name: id
          schema:
            type: string
          description: Member id
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HouseholdMember"
        "400":
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestError"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        "404":
          description: Id does not exist for given user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HouseholdUserNotFoundError"
  /v1/auth/households/members/me:
    delete:
      operationId: deleteSelfFromHousehold
      summary: Delete logged-in user from joined household
      tags:
        - Household
      security:
        - BearerAuth: []
      responses:
        "204":
          description: Successful response
        "404":
          description: Household not found for given user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HouseholdUserNotFoundError"
  /v1/auth/inventories/custom:
    post:
      summary: Create custom inventory
      tags:
        - v1
        - Inventory
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateCustomInventory"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomInventory"
  "/v1/auth/inventories/custom/{id}":
    patch:
      summary: Update custom inventory
      tags:
        - v1
        - Inventory
      parameters:
        - in: path
          name: id
          schema:
            type: number
          description: Custom inventory id
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateCustomInventory"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomInventory"
    delete:
      summary: Delete custom inventory
      tags:
        - v1
        - Inventory
      parameters:
        - in: path
          name: id
          schema:
            type: number
          description: Custom inventory id
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomInventory"
  /v1/auth/inventories:
    get:
      summary: List user inventories
      tags:
        - v1
        - Inventory
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserInventory"
    patch:
      summary: Update user inventories
      description: Update user inventories
      tags:
        - v1
        - Inventories
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserInventory"
      responses:
        "200":
          description: Successful response
          content:
            applications/json:
              schema:
                $ref: "#/components/schemas/AuthorizedUser"
        "400":
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestBodyError"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
  "/v1/auth/inventories/categories/{id}":
    get:
      summary: Get inventory category
      description: Get inventory category
      tags:
        - v1
        - Inventories
        - Files
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: number
          description: Inventory category id
      responses:
        "204":
          description: Successful response
        "400":
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestBodyError"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
    patch:
      summary: Update inventory category information
      description: Update inventory category information
      tags:
        - v1
        - Inventories
        - Files
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: number
          description: Inventory category id
      responses:
        "200":
          description: Created
        "400":
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestBodyError"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
  /v1/auth/library:
    get:
      operationId: getLibrary
      tags:
        - v1
        - Library
      summary: Fetches library data
      description: Fetches all the data that appear in the library page
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Library"
        "401":
          description: Unauthorized User
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
  "/events/{eventId}/risk-specific-plans":
    get:
      summary: List risk specific plans for event
      tags:
        - RiskSpecificPlan
      security:
        - BearerAuth: []
      parameters:
        - name: eventId
          in: path
          schema:
            type: number
          required: true
          description: Event id
      responses:
        "200":
          description: Successful response
          content:
            type: array
            items:
              application/json:
                schema:
                  $ref: "#/components/schemas/RiskSpecificPlan"
    patch:
      summary: Update risk specific plan items for user
      tags:
        - RiskSpecificPlan
      security:
        - BearerAuth: []
      parameters:
        - name: eventId
          in: path
          schema:
            type: number
          required: true
          description: Event id
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RiskSpecificPlan"
      responses:
        "204":
          description: Success
        "400":
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestError"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenError"
  "/events/{eventId}/risk-specific-plans/custom":
    post:
      summary: Create custom risk specific plan item for user
      tags:
        - RiskSpecificPlan
      security:
        - BearerAuth: []
      parameters:
        - name: eventId
          in: path
          schema:
            type: number
          required: true
          description: Event id
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CustomRiskSpecificPlan"
      responses:
        "201":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomRiskSpecificPlan"
        "400":
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestError"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenError"
  "/events/{eventId}/risk-specific-plans/information":
    get:
      summary: Get risk specific plan information
      tags:
        - RiskSpecificPlan
      security:
        - BearerAuth: []
      parameters:
        - name: eventId
          in: path
          schema:
            type: number
          required: true
          description: Event id
      responses:
        "200":
          description: Success
        "400":
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestError"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenError"
  "/events/{eventId}/risk-specific-plans/image/{fileUuid}":
    delete:
      summary: Delete image for risk specific plan
      tags:
        - RiskSpecificPlan
      security:
        - BearerAuth: []
      parameters:
        - name: eventId
          in: path
          schema:
            type: number
          required: true
          description: Event id
        - name: fileUuid
          in: path
          schema:
            type: number
          required: true
          description: File id
      responses:
        "204":
          description: Success
        "400":
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestError"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenError"
  "/events/{eventId}/risk-specific-plans/custom/{id}":
    patch:
      summary: Update custom risk specific plan
      tags:
        - RiskSpecificPlan
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          schema:
            type: number
          required: true
          description: Custom item id
        - name: eventId
          in: path
          schema:
            type: number
          required: true
          description: Event id
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CustomRiskSpecificPlan"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomRiskSpecificPlan"
        "400":
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestError"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenError"
    delete:
      summary: Delete custom risk specific plan
      tags:
        - RiskSpecificPlan
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          schema:
            type: number
          required: true
          description: Custom item id
        - name: eventId
          in: path
          schema:
            type: number
          required: true
          description: Event id
      responses:
        "204":
          description: Success
        "400":
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestError"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenError"
  /v1/auth/safe-locations/:
    post:
      summary: Create safe location
      description: Create safe location
      tags:
        - v1
        - SafeLocations
      requestBody:
        description: Request body for create safe location
        required: false
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateSafeLocation"
      responses:
        "201":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SafeLocation"
  "/v1/auth/safe-locations/{id}":
    patch:
      summary: Update safe location
      description: Update safe location
      tags:
        - v1
        - SafeLocations
      parameters:
        - in: path
          name: id
          schema:
            type: number
          description: Safe location id
      requestBody:
        description: Update safe location request
        required: false
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateSafeLocation"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SafeLocation"
    get:
      summary: Get safe location detail
      description: Get safe location detail
      tags:
        - v1
        - SafeLocations
      parameters:
        - in: path
          name: id
          schema:
            type: number
          description: Safe location id
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SafeLocation"
    delete:
      summary: Delete safe location
      description: Delete safe location
      tags:
        - v1
        - SafeLocations
      parameters:
        - in: path
          name: id
          schema:
            type: number
          description: Safe location id
      requestBody:
        description: Create safe location request
        required: false
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateSafeLocation"
      responses:
        "204":
          description: No content
  /v1/auth/safe-locations:
    get:
      summary: List safe locations
      description: List safe locations
      tags:
        - v1
        - SafeLocations
      responses:
        "200":
          description: Successful response
          content:
            type: array
            items:
              application/json:
                schema:
                  $ref: "#/components/schemas/SafeLocation"
  /v1/sessions/native:
    post:
      operationId: postSessionsNative
      summary: Login with Email/Password
      description: Verifies if `username` and `password` combination matches existing
        user and returns `accessToken` with profile details. To use the
        `accessToken` for subsequent requests set authorization header like
        shown below.
      tags:
        - v1
        - Sessions
      requestBody:
        description: User's credentials
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateSession"
      responses:
        "201":
          description: Successful login
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthorizedUser"
        "400":
          description: Wrong credentials or request body
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestError"
        "401":
          description: User not confirmed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserNotConfirmedError"
        "404":
          description: User doesn't exist
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserNotFoundError"
  /v1/sessions/google:
    post:
      operationId: postSessionsGoogle
      summary: Login with Google
      description: Using the Google sign in allows user to sign in easily without
        email verification step. This works for both new user and already
        existing one.
      tags:
        - v1
        - Sessions
      requestBody:
        description: User's credentials
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                googleToken:
                  description: Token provided by Google
                  type: string
                invitationToken:
                  type: string
                  description: Invitation token that will assign user to the specific household
                    (in case that it is a new user)
              required:
                - googleToken
            example:
              googleToken: ABCD-TO-BE-UPDATED-WITH-PROPER-LOOKING-TOKEN
              invitationToken: dc73f387699cac24fbf00d7e548aa5431130a622bfe3bd1efab9a4a2a6104038c4d00599cb95bc93196b3543e9fa25cf7bc3e93ec870e480ce3d34817a3ec20f
      responses:
        "201":
          description: Successful login
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthorizedUser"
        "401":
          description: Google login error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GoogleLoginError"
  /v1/sessions/apple:
    post:
      operationId: postSessionsApple
      summary: Login with Apple
      description: Using the Apple sign in allows user to sign in easily without email
        verification step. This works for both new user and already existing
        one.
      tags:
        - v1
        - Sessions
      requestBody:
        description: User's credentials
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateSessionApple"
      responses:
        "201":
          description: Successful login
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthorizedUser"
        "401":
          description: Apple login error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/AppleTokenExpired"
                  - $ref: "#/components/schemas/AppleLoginError"
  /v1/sessions/refresh:
    post:
      operationId: postSessionsRefresh
      summary: Refresh session
      description: Verifies if provided `refreshToken` matches existing user and
        returns `accessToken` with profile details. To use the `accessToken` for
        subsequent requests set authorization header like shown below.
      tags:
        - v1
        - Sessions
      requestBody:
        description: Refresh token
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                refreshToken:
                  description: Refresh token provided during login
                  type: string
                forAdmin:
                  description: If the request is for an admin access token
                  type: boolean
              required:
                - refreshToken
            example:
              refreshToken: a287683c4e0f630b161a6a045e29aacd6cc39c74
      responses:
        "201":
          description: Successful session refresh
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RefreshSession"
        "400":
          description: Invalid token or wrong request body
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                type: E_INVALID_TOKEN
                message: Invalid refresh token
        "401":
          description: Refresh token expired
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RefreshTokenExpiredError"
        "404":
          description: Refresh token not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RefreshTokenNotFoundError"
  /v1/sessions/destroy:
    post:
      operationId: postSessionsDestroy
      summary: Logout
      description: Logout user by deleting refresh token
      tags:
        - v1
        - Sessions
      requestBody:
        description: Refresh token
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                refreshToken:
                  description: Refresh token provided during login
                  type: string
              required:
                - refreshToken
            example:
              refreshToken: a287683c4e0f630b161a6a045e29aacd6cc39c74
      responses:
        "204":
          description: Successful session refresh (no content)
        "401":
          description: Unauthorized user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserNotFoundError"
  "/v1/auth/steps/{id}":
    get:
      operationId: getStep
      summary: Get step
      description: Get single Step referenced by id
      tags:
        - Steps
      parameters:
        - name: id
          in: path
          schema:
            type: number
          required: true
          description: Step ID
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Step"
        "400":
          description: Invalid url param
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestParamsError"
        "403":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenError"
        "404":
          description: Step not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StepNotFoundError"
  "/v1/auth/steps/{id}/completed":
    put:
      operationId: putCompleteStep
      summary: Complete step
      description: Mark particular step as completed
      tags:
        - Steps
      parameters:
        - name: id
          in: path
          schema:
            type: number
          required: true
          description: Step ID
      responses:
        "204":
          description: Successful response (no content)
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        "404":
          description: Step not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StepNotFoundError"
        "422":
          description: Invalid url param
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestParamsError"
  /v1/auth/subscriptions:
    get:
      operationId: getActiveSubscription
      summary: Get active subscription
      description: Get current active subscription for authorized user
      tags:
        - v1
        - Subscriptions
      security:
        - BearerAuth: []
      responses:
        "200":
          descriptions: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Subscription"
        "401":
          description: Unauthorized User
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        "404":
          description: Subscription not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SubscriptionNotFoundError"
    delete:
      operationId: deleteSubscription
      summary: Cancel active Stripe subscription
      description: Cancel active Stripe subscription for current user
      security:
        - BearerAuth: []
      tags:
        - v1
        - Subscriptions
      responses:
        "204":
          description: Successful response? Needs verification
        "401":
          description: Unauthorized User
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        "404":
          description: Subscription not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SubscriptionNotFoundError"
        "409":
          description: This subscription's automatic renewal has already been canceled
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/AlreadyUnsubscribedError"
                  - $ref: "#/components/schemas/SubscriptionCancelationNotSupportedError"
  /v1/auth/checkout-session:
    post:
      operationId: createCheckoutSession
      summary: Create a Checkout session
      description: Create a session to be used in Stripe Checkout purchase of a subscription
      security:
        - BearerAuth: []
      tags:
        - v1
        - Subscriptions
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateCheckoutSession"
      responses:
        "200":
          descriptions: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CheckoutSession"
        "401":
          description: Unauthorized User
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        "404":
          description: Stripe plan not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StripePlanNotFoundError"
  /v1/auth/apple-subscription-purchase:
    post:
      operationId: appleSubscriptionPurchase
      summary: Apple subscription purchase
      description: Process the Apple in-app purchase of a subscription
      security:
        - BearerAuth: []
      tags:
        - v1
        - Subscriptions
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AppleInAppSubscriptionPurchase"
      responses:
        "204":
          descriptions: to be added
        "401":
          description: Unauthorized User
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        "403":
          description: Invalid Apple Receipt/Invalid Bundle ID
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/InvalidAppleReceiptError"
                  - $ref: "#/components/schemas/InvalidBundleIdError"
        "404":
          description: Purchase not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PurchaseNotFoundError"
        "409":
          description: Purchase already processed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PurchaseAlreadyProcessedError"
  /v1/users:
    post:
      operationId: createUser
      tags:
        - v1
        - Users
      summary: Sign up
      description: Register new user with Email/Password
      requestBody:
        description: Users's credentials
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateUser"
      responses:
        "201":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthorizedUser"
        "400":
          description: Validaion error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestBodyError"
        "409":
          description: User is already registered
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictError"
              example:
                type: E_CONFLICT
                message: User already exists
                statusCode: 409
  /v1/auth/users/me:
    patch:
      operationId: updateMe
      summary: Update user
      description: Update user data
      tags:
        - v1
        - Users
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateUser"
      responses:
        "200":
          description: Successful response
          content:
            applications/json:
              schema:
                $ref: "#/components/schemas/AuthorizedUser"
        "400":
          description: Validaion error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestBodyError"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
    get:
      operationId: getMe
      summary: Get user
      description: Get authenticated user
      tags:
        - v1
        - Users
      security:
        - BearerAuth: []
      responses:
        "200":
          description: Successful response
          content:
            applications/json:
              schema:
                $ref: "#/components/schemas/AuthorizedUser"
        "409":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
  /v1/auth/users/me/password:
    patch:
      operationId: updatePassword
      summary: Update password
      description: Update user's password
      tags:
        - v1
        - Users
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdatePassword"
      responses:
        "200":
          description: Successful response
          content:
            applications/json:
              schema:
                $ref: "#/components/schemas/AuthorizedUser"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        "422":
          description: Validaion error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestBodyError"
  /v1/users/forgot-password:
    post:
      operationId: forgotPassword
      summary: Forgot password
      description: Endpoint to initiate forgotten password flow
      tags:
        - v1
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ForgotPassword"
      responses:
        "204":
          description: Successful response (no content)
        "400":
          description: Validaion error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestBodyError"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserNotFoundError"
  /v1/users/reset-password:
    post:
      operationId: resetPassword
      summary: Reset Password
      description: Endpoint to finish forgot password flow
      tags:
        - v1
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ResetPassword"
      responses:
        "204":
          description: Successful response (no content)
        "400":
          description: Validaion error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestBodyError"
        "401":
          description: Password reset token expired
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PasswordResetTokenExpiredError"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/UserNotFoundError"
                  - $ref: "#/components/schemas/PasswordResetTokenNotFoundError"
        "409":
          description: Password reset token already used
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PasswordResetTokenAlreadyUsedError"
  /v1/users/confirm:
    post:
      operationId: confirmUser
      summary: Confirm user email
      tags:
        - v1
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ConfirmUser"
      responses:
        "201":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthorizedUser"
        "400":
          description: Validaion error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestBodyError"
        "401":
          description: Confirmation token expired
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConfirmationTokenExpiredError"
        "404":
          description: Confirmation token not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConfirmationTokenNotFoundError"
        "409":
          description: Conflict record found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserAlreadyConfirmedError"
  /v1/users/resend-confirmation:
    post:
      operationId: resendConfirmation
      summary: Resend confirmation email
      description: Send new confirmation user for non-confirmed user
      tags:
        - v1
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ResendConfirmation"
      responses:
        "204":
          description: Successful response (no content)
        "400":
          description: Validaion error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestBodyError"
        "409":
          description: Conflict record found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictError"
  "/v1/auth/users/me/questions/{userQuestionType}":
    post:
      summary: Create onboarding answer for question
      description: Create onboarding answer for question
      tags:
        - v1
        - Users
        - Onboarding
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: userQuestionType
          schema:
            type: string
          description: Question type (what-brings-you)
      responses:
        "200":
          description: Successful response
          content:
            applications/json:
              schema:
                $ref: "#/components/schemas/AuthorizedUser"
  /v1/auth/users/me/addresses:
    post:
      summary: Upsert address
      description: Upsert address
      tags:
        - v1
        - Users
        - Address
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpsertAddress"
      responses:
        "200":
          description: Successful response
  /v1/auth/users/me/device-tokens:
    post:
      summary: Create device token
      description: Create device token
      tags:
        - v1
        - Users
        - Device Token
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateDeviceToken"
      responses:
        "200":
          description: Successful response
  /v1/auth/users/me/readiness:
    get:
      operationId: getUserReadinessGlobal
      summary: Readiness globally
      description: Get user readiness for all events
      tags:
        - v1
        - Users
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Readiness"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
  "/v1/auth/users/me/readiness/events/{id}":
    get:
      operationId: getUserReadinessEvent
      summary: Readiness for event
      description: Get user readiness for specific event
      tags:
        - v1
        - Users
      parameters:
        - name: id
          in: path
          schema:
            type: number
          required: true
          description: Event ID
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Readiness"
        "400":
          description: Validaion error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestBodyError"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
  "/v1/auth/users/invites/{token}":
    get:
      operationId: getInvitationDetail
      summary: Get Invitation detail
      description: Returns invitation detail
      tags:
        - v1
        - Users
        - Invitation
      parameters:
        - name: token
          in: path
          schema:
            type: string
          required: true
          description: token
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  isOwner:
                    type: boolean
                    description: Flag to say that user can invite other users
                  invitations:
                    type: array
                    items:
                      $ref: "#/components/schemas/InvitationResponse"
  /v1/auth/users/invites:
    post:
      operationId: createInvitation
      summary: Create Invitation
      description: Sends email to given address with token that can be used during
        registration to join issuer's household
      tags:
        - v1
        - Users
        - Invitation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InviteUser"
      responses:
        "201":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvitationResponse"
        "400":
          description: Validaion error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestBodyError"
  /v1/auth/users/invitation:
    delete:
      operationId: deleteInvitation
      summary: Revoke Invitation
      description: Marks invitation for given email as revoked
      tags:
        - v1
        - Users
        - Invitation
      parameters:
        - in: query
          name: email
          schema:
            type: string
          description: Invated user's email for identification
      responses:
        "204":
          description: Successful response (no response)
        "400":
          description: Validaion error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestBodyError"
        "404":
          description: Active invitation token for email address doesn't exist
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvitationTokenNotFoundError"
  "/v1/auth/users/check/{email}":
    get:
      operationId: checkEmail
      summary: Check email
      description: Check email for existing
      tags:
        - v1
        - Users
      parameters:
        - in: path
          name: email
          schema:
            type: string
          description: user email
      responses:
        "200":
          description: Successful response
        "400":
          description: Validaion error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestBodyError"
        "404":
          description: Active invitation token for email address doesn't exist
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvitationTokenNotFoundError"
  "/v1/auth/users/invites/{token}/accept":
    post:
      operationId: accept invitation
      summary: Accept Invitation
      description: Accept invitation
      tags:
        - v1
        - Users
        - Invitation
      parameters:
        - in: path
          name: token
          schema:
            type: string
          description: Invitation token
      responses:
        "204":
          description: Successful response (no response)
        "400":
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestBodyError"
        "404":
          description: Active invitation token for email address doesn't exist
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvitationTokenNotFoundError"
